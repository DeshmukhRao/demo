{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst util_1 = require(\"../utils/util\");\nconst lighthouse_config_1 = require(\"../../lighthouse.config\");\nexports.default = async cid => {\n  try {\n    // cid check\n    if (!(0, util_1.isCID)(cid)) {\n      throw new Error('Invalid CID');\n    }\n    // get file info\n    const response = await fetch(`${lighthouse_config_1.lighthouseConfig.lighthouseAPI}/api/lighthouse/file_info?cid=${cid}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const fileInfo = await response.json();\n    /*\n      return:\n        {\n          \"fileSizeInBytes\":\"15256\",\n          \"cid\":\"QmWC9AkGa6vSbR4yizoJrFMfmZh4XjZXxvRDknk2LdJffc\",\n          \"encryption\":false,\n          \"fileName\":\"testImages\",\n          \"mimeType\":null,\n        }\n    */\n    return {\n      data: fileInfo\n    };\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","util_1","require","lighthouse_config_1","default","cid","isCID","Error","response","fetch","lighthouseConfig","lighthouseAPI","ok","status","fileInfo","json","data","error","message"],"sources":["D:/demo/node_modules/@lighthouse-web3/sdk/dist/Lighthouse/getFileInfo/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = require(\"../utils/util\");\nconst lighthouse_config_1 = require(\"../../lighthouse.config\");\nexports.default = async (cid) => {\n    try {\n        // cid check\n        if (!(0, util_1.isCID)(cid)) {\n            throw new Error('Invalid CID');\n        }\n        // get file info\n        const response = await fetch(`${lighthouse_config_1.lighthouseConfig.lighthouseAPI}/api/lighthouse/file_info?cid=${cid}`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const fileInfo = (await response.json());\n        /*\n          return:\n            {\n              \"fileSizeInBytes\":\"15256\",\n              \"cid\":\"QmWC9AkGa6vSbR4yizoJrFMfmZh4XjZXxvRDknk2LdJffc\",\n              \"encryption\":false,\n              \"fileName\":\"testImages\",\n              \"mimeType\":null,\n            }\n        */\n        return { data: fileInfo };\n    }\n    catch (error) {\n        throw new Error(error.message);\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,MAAM,GAAGC,OAAO,CAAC,eAAe,CAAC;AACvC,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AAC9DH,OAAO,CAACK,OAAO,GAAG,MAAOC,GAAG,IAAK;EAC7B,IAAI;IACA;IACA,IAAI,CAAC,CAAC,CAAC,EAAEJ,MAAM,CAACK,KAAK,EAAED,GAAG,CAAC,EAAE;MACzB,MAAM,IAAIE,KAAK,CAAC,aAAa,CAAC;IAClC;IACA;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,mBAAmB,CAACO,gBAAgB,CAACC,aAAa,iCAAiCN,GAAG,EAAE,CAAC;IACzH,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;MACd,MAAM,IAAIL,KAAK,CAAC,uBAAuBC,QAAQ,CAACK,MAAM,EAAE,CAAC;IAC7D;IACA,MAAMC,QAAQ,GAAI,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAE;IACxC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,OAAO;MAAEC,IAAI,EAAEF;IAAS,CAAC;EAC7B,CAAC,CACD,OAAOG,KAAK,EAAE;IACV,MAAM,IAAIV,KAAK,CAACU,KAAK,CAACC,OAAO,CAAC;EAClC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}