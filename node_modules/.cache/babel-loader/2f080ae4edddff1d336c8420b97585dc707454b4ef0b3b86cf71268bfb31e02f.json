{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = (sourcePath, filePath) => {\n  let newString = sourcePath.startsWith('./') ? sourcePath.substring(2) : sourcePath;\n  //make sure there isn't a dangling / to throw a false positive into the mix\n  const lastIndexOfDirectory = newString.lastIndexOf('/');\n  if (lastIndexOfDirectory === -1) {\n    return filePath;\n  }\n  const lengthOfSource = sourcePath.length;\n  //only trim if the / is the last character in the string\n  if (lastIndexOfDirectory === lengthOfSource - 1) {\n    newString = sourcePath.slice(0, -1);\n  }\n  //now that we're sure of no false positive, let's check and see where the \"root\" directory is\n  const newLastIndex = newString.lastIndexOf('/');\n  if (newLastIndex === -1) {\n    return newString;\n  } else {\n    const pathGarbage = newString.substring(0, newLastIndex + 1);\n    newString = filePath.split(pathGarbage)[1];\n  }\n  return newString;\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","default","sourcePath","filePath","newString","startsWith","substring","lastIndexOfDirectory","lastIndexOf","lengthOfSource","length","slice","newLastIndex","pathGarbage","split"],"sources":["D:/demo/node_modules/@lighthouse-web3/sdk/dist/Lighthouse/utils/basePathConvert.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = (sourcePath, filePath) => {\n    let newString = sourcePath.startsWith('./')\n        ? sourcePath.substring(2)\n        : sourcePath;\n    //make sure there isn't a dangling / to throw a false positive into the mix\n    const lastIndexOfDirectory = newString.lastIndexOf('/');\n    if (lastIndexOfDirectory === -1) {\n        return filePath;\n    }\n    const lengthOfSource = sourcePath.length;\n    //only trim if the / is the last character in the string\n    if (lastIndexOfDirectory === lengthOfSource - 1) {\n        newString = sourcePath.slice(0, -1);\n    }\n    //now that we're sure of no false positive, let's check and see where the \"root\" directory is\n    const newLastIndex = newString.lastIndexOf('/');\n    if (newLastIndex === -1) {\n        return newString;\n    }\n    else {\n        const pathGarbage = newString.substring(0, newLastIndex + 1);\n        newString = filePath.split(pathGarbage)[1];\n    }\n    return newString;\n};\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,OAAO,GAAG,CAACC,UAAU,EAAEC,QAAQ,KAAK;EACxC,IAAIC,SAAS,GAAGF,UAAU,CAACG,UAAU,CAAC,IAAI,CAAC,GACrCH,UAAU,CAACI,SAAS,CAAC,CAAC,CAAC,GACvBJ,UAAU;EAChB;EACA,MAAMK,oBAAoB,GAAGH,SAAS,CAACI,WAAW,CAAC,GAAG,CAAC;EACvD,IAAID,oBAAoB,KAAK,CAAC,CAAC,EAAE;IAC7B,OAAOJ,QAAQ;EACnB;EACA,MAAMM,cAAc,GAAGP,UAAU,CAACQ,MAAM;EACxC;EACA,IAAIH,oBAAoB,KAAKE,cAAc,GAAG,CAAC,EAAE;IAC7CL,SAAS,GAAGF,UAAU,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACvC;EACA;EACA,MAAMC,YAAY,GAAGR,SAAS,CAACI,WAAW,CAAC,GAAG,CAAC;EAC/C,IAAII,YAAY,KAAK,CAAC,CAAC,EAAE;IACrB,OAAOR,SAAS;EACpB,CAAC,MACI;IACD,MAAMS,WAAW,GAAGT,SAAS,CAACE,SAAS,CAAC,CAAC,EAAEM,YAAY,GAAG,CAAC,CAAC;IAC5DR,SAAS,GAAGD,QAAQ,CAACW,KAAK,CAACD,WAAW,CAAC,CAAC,CAAC,CAAC;EAC9C;EACA,OAAOT,SAAS;AACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}