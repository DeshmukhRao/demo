{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shardKey = void 0;\nlet bls = null;\nif (typeof window === \"undefined\") {\n  bls = eval(\"require\")(\"bls-eth-wasm\");\n} else {\n  bls = require(\"bls-eth-wasm/browser\");\n}\nconst shardKey = async (key, threshold = 3, keyCount = 5) => {\n  try {\n    const msk = [];\n    const idVec = [];\n    const secVec = [];\n    await bls.init(bls.BLS12_381).then(() => bls.getCurveOrder());\n    const masterKey = new bls.SecretKey();\n    masterKey.deserializeHexStr(key);\n    msk.push(masterKey);\n    for (let i = 0; i < threshold; i++) {\n      const sk = new bls.SecretKey();\n      sk.setByCSPRNG();\n      msk.push(sk);\n    }\n    /*\n    key sharing\n    */\n    for (let i = 0; i < keyCount; i++) {\n      //create random Vector ID(points on the ECC)\n      const id = new bls.Id();\n      id.setByCSPRNG();\n      idVec.push(id);\n      //Create a secKey Shard\n      const sk = new bls.SecretKey();\n      sk.share(msk, idVec[i]);\n      secVec.push(sk);\n    }\n    //Convert vector in to readable hex values\n    return {\n      isShardable: true,\n      keyShards: secVec?.map((sk, index) => ({\n        key: sk.serializeToHexStr(),\n        index: idVec[index].serializeToHexStr()\n      })) ?? []\n    };\n  } catch (e) {\n    return {\n      isShardable: false,\n      keyShards: []\n    };\n  }\n};\nexports.shardKey = shardKey;","map":{"version":3,"names":["Object","defineProperty","exports","value","shardKey","bls","window","eval","require","key","threshold","keyCount","msk","idVec","secVec","init","BLS12_381","then","getCurveOrder","masterKey","SecretKey","deserializeHexStr","push","i","sk","setByCSPRNG","id","Id","share","isShardable","keyShards","map","index","serializeToHexStr","e"],"sources":["D:/demo/node_modules/@lighthouse-web3/kavach/dist/methods/shardKey/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shardKey = void 0;\nlet bls = null;\nif (typeof window === \"undefined\") {\n    bls = eval(\"require\")(\"bls-eth-wasm\");\n}\nelse {\n    bls = require(\"bls-eth-wasm/browser\");\n}\nconst shardKey = async (key, threshold = 3, keyCount = 5) => {\n    try {\n        const msk = [];\n        const idVec = [];\n        const secVec = [];\n        await bls.init(bls.BLS12_381).then(() => bls.getCurveOrder());\n        const masterKey = new bls.SecretKey();\n        masterKey.deserializeHexStr(key);\n        msk.push(masterKey);\n        for (let i = 0; i < threshold; i++) {\n            const sk = new bls.SecretKey();\n            sk.setByCSPRNG();\n            msk.push(sk);\n        }\n        /*\n        key sharing\n        */\n        for (let i = 0; i < keyCount; i++) {\n            //create random Vector ID(points on the ECC)\n            const id = new bls.Id();\n            id.setByCSPRNG();\n            idVec.push(id);\n            //Create a secKey Shard\n            const sk = new bls.SecretKey();\n            sk.share(msk, idVec[i]);\n            secVec.push(sk);\n        }\n        //Convert vector in to readable hex values\n        return {\n            isShardable: true,\n            keyShards: secVec?.map((sk, index) => ({\n                key: sk.serializeToHexStr(),\n                index: idVec[index].serializeToHexStr(),\n            })) ?? [],\n        };\n    }\n    catch (e) {\n        return { isShardable: false, keyShards: [] };\n    }\n};\nexports.shardKey = shardKey;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,QAAQ,GAAG,KAAK,CAAC;AACzB,IAAIC,GAAG,GAAG,IAAI;AACd,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;EAC/BD,GAAG,GAAGE,IAAI,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC;AACzC,CAAC,MACI;EACDF,GAAG,GAAGG,OAAO,CAAC,sBAAsB,CAAC;AACzC;AACA,MAAMJ,QAAQ,GAAG,MAAAA,CAAOK,GAAG,EAAEC,SAAS,GAAG,CAAC,EAAEC,QAAQ,GAAG,CAAC,KAAK;EACzD,IAAI;IACA,MAAMC,GAAG,GAAG,EAAE;IACd,MAAMC,KAAK,GAAG,EAAE;IAChB,MAAMC,MAAM,GAAG,EAAE;IACjB,MAAMT,GAAG,CAACU,IAAI,CAACV,GAAG,CAACW,SAAS,CAAC,CAACC,IAAI,CAAC,MAAMZ,GAAG,CAACa,aAAa,CAAC,CAAC,CAAC;IAC7D,MAAMC,SAAS,GAAG,IAAId,GAAG,CAACe,SAAS,CAAC,CAAC;IACrCD,SAAS,CAACE,iBAAiB,CAACZ,GAAG,CAAC;IAChCG,GAAG,CAACU,IAAI,CAACH,SAAS,CAAC;IACnB,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,SAAS,EAAEa,CAAC,EAAE,EAAE;MAChC,MAAMC,EAAE,GAAG,IAAInB,GAAG,CAACe,SAAS,CAAC,CAAC;MAC9BI,EAAE,CAACC,WAAW,CAAC,CAAC;MAChBb,GAAG,CAACU,IAAI,CAACE,EAAE,CAAC;IAChB;IACA;AACR;AACA;IACQ,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,QAAQ,EAAEY,CAAC,EAAE,EAAE;MAC/B;MACA,MAAMG,EAAE,GAAG,IAAIrB,GAAG,CAACsB,EAAE,CAAC,CAAC;MACvBD,EAAE,CAACD,WAAW,CAAC,CAAC;MAChBZ,KAAK,CAACS,IAAI,CAACI,EAAE,CAAC;MACd;MACA,MAAMF,EAAE,GAAG,IAAInB,GAAG,CAACe,SAAS,CAAC,CAAC;MAC9BI,EAAE,CAACI,KAAK,CAAChB,GAAG,EAAEC,KAAK,CAACU,CAAC,CAAC,CAAC;MACvBT,MAAM,CAACQ,IAAI,CAACE,EAAE,CAAC;IACnB;IACA;IACA,OAAO;MACHK,WAAW,EAAE,IAAI;MACjBC,SAAS,EAAEhB,MAAM,EAAEiB,GAAG,CAAC,CAACP,EAAE,EAAEQ,KAAK,MAAM;QACnCvB,GAAG,EAAEe,EAAE,CAACS,iBAAiB,CAAC,CAAC;QAC3BD,KAAK,EAAEnB,KAAK,CAACmB,KAAK,CAAC,CAACC,iBAAiB,CAAC;MAC1C,CAAC,CAAC,CAAC,IAAI;IACX,CAAC;EACL,CAAC,CACD,OAAOC,CAAC,EAAE;IACN,OAAO;MAAEL,WAAW,EAAE,KAAK;MAAEC,SAAS,EAAE;IAAG,CAAC;EAChD;AACJ,CAAC;AACD5B,OAAO,CAACE,QAAQ,GAAGA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}