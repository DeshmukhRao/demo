{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decryptFile = exports.encryptFile = void 0;\nconst importKeyFromBytes = async (keyBytes, crypto) => crypto.subtle.importKey('raw', keyBytes, 'PBKDF2', false, ['deriveKey']);\nconst deriveKey = async (sourceKey, keyUsage, keyDerivationParams, crypto) => crypto.subtle.deriveKey(keyDerivationParams, sourceKey, {\n  name: 'AES-GCM',\n  length: 256\n}, false, keyUsage);\nconst encryptFile = async (fileArrayBuffer, password) => {\n  try {\n    const {\n      Crypto\n    } = eval('require')('@peculiar/webcrypto');\n    const crypto = new Crypto();\n    const plainTextBytes = new Uint8Array(fileArrayBuffer);\n    const passwordBytes = new TextEncoder().encode(password);\n    const salt = crypto.getRandomValues(new Uint8Array(16));\n    const iv = crypto.getRandomValues(new Uint8Array(12));\n    const passwordKey = await importKeyFromBytes(passwordBytes, crypto);\n    const aesKey = await deriveKey(passwordKey, ['encrypt'], {\n      name: 'PBKDF2',\n      salt: salt,\n      iterations: 250000,\n      hash: 'SHA-256'\n    }, crypto);\n    const cipherBytes = await crypto.subtle.encrypt({\n      name: 'AES-GCM',\n      iv: iv\n    }, aesKey, plainTextBytes);\n    const cipherBytesArray = new Uint8Array(cipherBytes);\n    const resultBytes = new Uint8Array(cipherBytesArray.byteLength + salt.byteLength + iv.byteLength);\n    resultBytes.set(salt, 0);\n    resultBytes.set(iv, salt.byteLength);\n    resultBytes.set(cipherBytesArray, salt.byteLength + iv.byteLength);\n    return resultBytes;\n  } catch (error) {\n    console.error('Error encrypting file');\n    console.error(error);\n    throw error;\n  }\n};\nexports.encryptFile = encryptFile;\nconst decryptFile = async (cipher, password) => {\n  try {\n    const {\n      Crypto\n    } = eval('require')('@peculiar/webcrypto');\n    const crypto = new Crypto();\n    const cipherBytes = new Uint8Array(cipher);\n    const passwordBytes = new TextEncoder().encode(password);\n    const salt = cipherBytes.slice(0, 16);\n    const iv = cipherBytes.slice(16, 16 + 12);\n    const data = cipherBytes.slice(16 + 12);\n    const passwordKey = await importKeyFromBytes(passwordBytes, crypto);\n    const aesKey = await deriveKey(passwordKey, ['decrypt'], {\n      name: 'PBKDF2',\n      salt: salt,\n      iterations: 250000,\n      hash: 'SHA-256'\n    }, crypto);\n    const decryptedContent = await crypto.subtle.decrypt({\n      name: 'AES-GCM',\n      iv: iv\n    }, aesKey, data);\n    return decryptedContent;\n  } catch (error) {\n    console.error('Error decrypting file');\n    console.error(error);\n    return;\n  }\n};\nexports.decryptFile = decryptFile;","map":{"version":3,"names":["Object","defineProperty","exports","value","decryptFile","encryptFile","importKeyFromBytes","keyBytes","crypto","subtle","importKey","deriveKey","sourceKey","keyUsage","keyDerivationParams","name","length","fileArrayBuffer","password","Crypto","eval","plainTextBytes","Uint8Array","passwordBytes","TextEncoder","encode","salt","getRandomValues","iv","passwordKey","aesKey","iterations","hash","cipherBytes","encrypt","cipherBytesArray","resultBytes","byteLength","set","error","console","cipher","slice","data","decryptedContent","decrypt"],"sources":["D:/demo/node_modules/@lighthouse-web3/sdk/dist/Lighthouse/uploadEncrypted/encryptionNode.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decryptFile = exports.encryptFile = void 0;\nconst importKeyFromBytes = async (keyBytes, crypto) => crypto.subtle.importKey('raw', keyBytes, 'PBKDF2', false, ['deriveKey']);\nconst deriveKey = async (sourceKey, keyUsage, keyDerivationParams, crypto) => crypto.subtle.deriveKey(keyDerivationParams, sourceKey, { name: 'AES-GCM', length: 256 }, false, keyUsage);\nconst encryptFile = async (fileArrayBuffer, password) => {\n    try {\n        const { Crypto } = eval('require')('@peculiar/webcrypto');\n        const crypto = new Crypto();\n        const plainTextBytes = new Uint8Array(fileArrayBuffer);\n        const passwordBytes = new TextEncoder().encode(password);\n        const salt = crypto.getRandomValues(new Uint8Array(16));\n        const iv = crypto.getRandomValues(new Uint8Array(12));\n        const passwordKey = await importKeyFromBytes(passwordBytes, crypto);\n        const aesKey = await deriveKey(passwordKey, ['encrypt'], {\n            name: 'PBKDF2',\n            salt: salt,\n            iterations: 250000,\n            hash: 'SHA-256',\n        }, crypto);\n        const cipherBytes = await crypto.subtle.encrypt({ name: 'AES-GCM', iv: iv }, aesKey, plainTextBytes);\n        const cipherBytesArray = new Uint8Array(cipherBytes);\n        const resultBytes = new Uint8Array(cipherBytesArray.byteLength + salt.byteLength + iv.byteLength);\n        resultBytes.set(salt, 0);\n        resultBytes.set(iv, salt.byteLength);\n        resultBytes.set(cipherBytesArray, salt.byteLength + iv.byteLength);\n        return resultBytes;\n    }\n    catch (error) {\n        console.error('Error encrypting file');\n        console.error(error);\n        throw error;\n    }\n};\nexports.encryptFile = encryptFile;\nconst decryptFile = async (cipher, password) => {\n    try {\n        const { Crypto } = eval('require')('@peculiar/webcrypto');\n        const crypto = new Crypto();\n        const cipherBytes = new Uint8Array(cipher);\n        const passwordBytes = new TextEncoder().encode(password);\n        const salt = cipherBytes.slice(0, 16);\n        const iv = cipherBytes.slice(16, 16 + 12);\n        const data = cipherBytes.slice(16 + 12);\n        const passwordKey = await importKeyFromBytes(passwordBytes, crypto);\n        const aesKey = await deriveKey(passwordKey, ['decrypt'], {\n            name: 'PBKDF2',\n            salt: salt,\n            iterations: 250000,\n            hash: 'SHA-256',\n        }, crypto);\n        const decryptedContent = await crypto.subtle.decrypt({\n            name: 'AES-GCM',\n            iv: iv,\n        }, aesKey, data);\n        return decryptedContent;\n    }\n    catch (error) {\n        console.error('Error decrypting file');\n        console.error(error);\n        return;\n    }\n};\nexports.decryptFile = decryptFile;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}