{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst lighthouse_config_1 = require(\"../../lighthouse.config\");\nexports.default = async apiKey => {\n  try {\n    const response = await fetch(lighthouse_config_1.lighthouseConfig.lighthouseAPI + `/api/ipns/generate_key`, {\n      headers: {\n        Authorization: `Bearer ${apiKey}`,\n        'Content-Type': 'application/json' // Ensure headers are set for JSON\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Request failed with status code ${response.status}`);\n    }\n    const key = await response.json();\n    /*\n      return:\n        {\n          data: {\n              \"ipnsName\": \"6cda213e3a534f8388665dee77a26458\",\n              \"ipnsId\": \"k51qzi5uqu5dm6uvby6428rfpcv1vcba6hxq6vcu52qtfsx3np4536jkr71gnu\"\n          }\n        }\n    */\n    return {\n      data: key\n    };\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","lighthouse_config_1","require","default","apiKey","response","fetch","lighthouseConfig","lighthouseAPI","headers","Authorization","ok","Error","status","key","json","data","error","message"],"sources":["D:/demo/node_modules/@lighthouse-web3/sdk/dist/Lighthouse/ipns/generateKey.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lighthouse_config_1 = require(\"../../lighthouse.config\");\nexports.default = async (apiKey) => {\n    try {\n        const response = await fetch(lighthouse_config_1.lighthouseConfig.lighthouseAPI + `/api/ipns/generate_key`, {\n            headers: {\n                Authorization: `Bearer ${apiKey}`,\n                'Content-Type': 'application/json', // Ensure headers are set for JSON\n            },\n        });\n        if (!response.ok) {\n            throw new Error(`Request failed with status code ${response.status}`);\n        }\n        const key = (await response.json());\n        /*\n          return:\n            {\n              data: {\n                  \"ipnsName\": \"6cda213e3a534f8388665dee77a26458\",\n                  \"ipnsId\": \"k51qzi5uqu5dm6uvby6428rfpcv1vcba6hxq6vcu52qtfsx3np4536jkr71gnu\"\n              }\n            }\n        */\n        return { data: key };\n    }\n    catch (error) {\n        throw new Error(error.message);\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,mBAAmB,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AAC9DH,OAAO,CAACI,OAAO,GAAG,MAAOC,MAAM,IAAK;EAChC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,mBAAmB,CAACM,gBAAgB,CAACC,aAAa,GAAG,wBAAwB,EAAE;MACxGC,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUN,MAAM,EAAE;QACjC,cAAc,EAAE,kBAAkB,CAAE;MACxC;IACJ,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,CAACM,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,mCAAmCP,QAAQ,CAACQ,MAAM,EAAE,CAAC;IACzE;IACA,MAAMC,GAAG,GAAI,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAE;IACnC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,OAAO;MAAEC,IAAI,EAAEF;IAAI,CAAC;EACxB,CAAC,CACD,OAAOG,KAAK,EAAE;IACV,MAAM,IAAIL,KAAK,CAACK,KAAK,CAACC,OAAO,CAAC;EAClC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}