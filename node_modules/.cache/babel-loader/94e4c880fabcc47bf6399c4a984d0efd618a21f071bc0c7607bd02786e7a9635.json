{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generate = void 0;\nlet bls = null;\nif (typeof window === \"undefined\") {\n  bls = eval(\"require\")(\"bls-eth-wasm\");\n} else {\n  bls = require(\"bls-eth-wasm/browser\");\n}\nconst generate = async (threshold = 3, keyCount = 5) => {\n  if (threshold > keyCount) {\n    throw new Error(\"keyCount must be greater then threshold\");\n  }\n  const msk = [];\n  const idVec = [];\n  const secVec = [];\n  await bls.init(bls.BLS12_381).then(() => bls.getCurveOrder());\n  /*\n  setup master secret key\n  */\n  // other members of the array ingredients used in the algorithm\n  for (let i = 0; i < threshold; i++) {\n    const sk = new bls.SecretKey();\n    sk.setByCSPRNG();\n    msk.push(sk);\n  }\n  /*\n  key sharing\n  */\n  for (let i = 0; i < keyCount; i++) {\n    //create random Vector ID(points on the ECC)\n    const id = new bls.Id();\n    id.setByCSPRNG();\n    idVec.push(id);\n    //Create a secKey Shard\n    const sk = new bls.SecretKey();\n    sk.share(msk, idVec[i]);\n    secVec.push(sk);\n  }\n  if (secVec.length !== idVec.length) throw new Error(\"key vector Length don't match\");\n  //Convert vector in to readable hex values\n  return {\n    masterKey: msk[0]?.serializeToHexStr(),\n    keyShards: secVec?.map((sk, index) => ({\n      key: sk.serializeToHexStr(),\n      index: idVec[index].serializeToHexStr()\n    })) ?? []\n  };\n};\nexports.generate = generate;","map":{"version":3,"names":["Object","defineProperty","exports","value","generate","bls","window","eval","require","threshold","keyCount","Error","msk","idVec","secVec","init","BLS12_381","then","getCurveOrder","i","sk","SecretKey","setByCSPRNG","push","id","Id","share","length","masterKey","serializeToHexStr","keyShards","map","index","key"],"sources":["D:/demo/node_modules/@lighthouse-web3/kavach/dist/methods/generate/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.generate = void 0;\nlet bls = null;\nif (typeof window === \"undefined\") {\n    bls = eval(\"require\")(\"bls-eth-wasm\");\n}\nelse {\n    bls = require(\"bls-eth-wasm/browser\");\n}\nconst generate = async (threshold = 3, keyCount = 5) => {\n    if (threshold > keyCount) {\n        throw new Error(\"keyCount must be greater then threshold\");\n    }\n    const msk = [];\n    const idVec = [];\n    const secVec = [];\n    await bls.init(bls.BLS12_381).then(() => bls.getCurveOrder());\n    /*\n    setup master secret key\n    */\n    // other members of the array ingredients used in the algorithm\n    for (let i = 0; i < threshold; i++) {\n        const sk = new bls.SecretKey();\n        sk.setByCSPRNG();\n        msk.push(sk);\n    }\n    /*\n    key sharing\n    */\n    for (let i = 0; i < keyCount; i++) {\n        //create random Vector ID(points on the ECC)\n        const id = new bls.Id();\n        id.setByCSPRNG();\n        idVec.push(id);\n        //Create a secKey Shard\n        const sk = new bls.SecretKey();\n        sk.share(msk, idVec[i]);\n        secVec.push(sk);\n    }\n    if (secVec.length !== idVec.length)\n        throw new Error(\"key vector Length don't match\");\n    //Convert vector in to readable hex values\n    return {\n        masterKey: msk[0]?.serializeToHexStr(),\n        keyShards: secVec?.map((sk, index) => ({\n            key: sk.serializeToHexStr(),\n            index: idVec[index].serializeToHexStr(),\n        })) ?? [],\n    };\n};\nexports.generate = generate;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,QAAQ,GAAG,KAAK,CAAC;AACzB,IAAIC,GAAG,GAAG,IAAI;AACd,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;EAC/BD,GAAG,GAAGE,IAAI,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC;AACzC,CAAC,MACI;EACDF,GAAG,GAAGG,OAAO,CAAC,sBAAsB,CAAC;AACzC;AACA,MAAMJ,QAAQ,GAAG,MAAAA,CAAOK,SAAS,GAAG,CAAC,EAAEC,QAAQ,GAAG,CAAC,KAAK;EACpD,IAAID,SAAS,GAAGC,QAAQ,EAAE;IACtB,MAAM,IAAIC,KAAK,CAAC,yCAAyC,CAAC;EAC9D;EACA,MAAMC,GAAG,GAAG,EAAE;EACd,MAAMC,KAAK,GAAG,EAAE;EAChB,MAAMC,MAAM,GAAG,EAAE;EACjB,MAAMT,GAAG,CAACU,IAAI,CAACV,GAAG,CAACW,SAAS,CAAC,CAACC,IAAI,CAAC,MAAMZ,GAAG,CAACa,aAAa,CAAC,CAAC,CAAC;EAC7D;AACJ;AACA;EACI;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,SAAS,EAAEU,CAAC,EAAE,EAAE;IAChC,MAAMC,EAAE,GAAG,IAAIf,GAAG,CAACgB,SAAS,CAAC,CAAC;IAC9BD,EAAE,CAACE,WAAW,CAAC,CAAC;IAChBV,GAAG,CAACW,IAAI,CAACH,EAAE,CAAC;EAChB;EACA;AACJ;AACA;EACI,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,QAAQ,EAAES,CAAC,EAAE,EAAE;IAC/B;IACA,MAAMK,EAAE,GAAG,IAAInB,GAAG,CAACoB,EAAE,CAAC,CAAC;IACvBD,EAAE,CAACF,WAAW,CAAC,CAAC;IAChBT,KAAK,CAACU,IAAI,CAACC,EAAE,CAAC;IACd;IACA,MAAMJ,EAAE,GAAG,IAAIf,GAAG,CAACgB,SAAS,CAAC,CAAC;IAC9BD,EAAE,CAACM,KAAK,CAACd,GAAG,EAAEC,KAAK,CAACM,CAAC,CAAC,CAAC;IACvBL,MAAM,CAACS,IAAI,CAACH,EAAE,CAAC;EACnB;EACA,IAAIN,MAAM,CAACa,MAAM,KAAKd,KAAK,CAACc,MAAM,EAC9B,MAAM,IAAIhB,KAAK,CAAC,+BAA+B,CAAC;EACpD;EACA,OAAO;IACHiB,SAAS,EAAEhB,GAAG,CAAC,CAAC,CAAC,EAAEiB,iBAAiB,CAAC,CAAC;IACtCC,SAAS,EAAEhB,MAAM,EAAEiB,GAAG,CAAC,CAACX,EAAE,EAAEY,KAAK,MAAM;MACnCC,GAAG,EAAEb,EAAE,CAACS,iBAAiB,CAAC,CAAC;MAC3BG,KAAK,EAAEnB,KAAK,CAACmB,KAAK,CAAC,CAACH,iBAAiB,CAAC;IAC1C,CAAC,CAAC,CAAC,IAAI;EACX,CAAC;AACL,CAAC;AACD3B,OAAO,CAACE,QAAQ,GAAGA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}