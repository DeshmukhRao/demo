{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.accessConditionSchema = exports.updateConditionSchema = void 0;\nconst joi_1 = __importDefault(require(\"joi\"));\nconst solidityType = [\"address\", \"address[]\", \"bool\", \"bool[]\", \"bytes1\", \"bytes2\", \"bytes3\", \"bytes4\", \"bytes5\", \"bytes6\", \"bytes7\", \"bytes8\", \"bytes16\", \"bytes32\", \"bytes1[]\", \"bytes2[]\", \"bytes3[]\", \"bytes4[]\", \"bytes5[]\", \"bytes6[]\", \"bytes7[]\", \"bytes8[]\", \"bytes16[]\", \"bytes32[]\", \"uint8\", \"uint16\", \"uint24\", \"uint32\", \"uint40\", \"uint48\", \"uint64\", \"uint128\", \"uint192\", \"uint256\", \"int8\", \"int16\", \"int24\", \"int32\", \"int40\", \"int48\", \"int64\", \"int128\", \"int192\", \"int256\", \"uint8[]\", \"uint16[]\", \"uint24[]\", \"uint32[]\", \"uint40[]\", \"uint48[]\", \"uint64[]\", \"uint128[]\", \"uint192[]\", \"uint256[]\", \"int8[]\", \"int16[]\", \"int24[]\", \"int32[]\", \"int40[]\", \"int48[]\", \"int64[]\", \"int128[]\", \"int192[]\", \"int256[]\"];\nconst SupportedChains = {\n  EVM: [],\n  SOLANA: [\"DEVNET\", \"TESTNET\", \"MAINNET\"],\n  COREUM: [\"Coreum_Devnet\", \"Coreum_Testnet\", \"Coreum_Mainnet\"]\n};\nconst evmConditions = joi_1.default.array().min(1).required().items(joi_1.default.object({\n  id: joi_1.default.number().min(1).required(),\n  standardContractType: joi_1.default.string().valid(\"ERC20\", \"ERC721\", \"ERC1155\", \"Custom\", \"\").insensitive().required(),\n  contractAddress: joi_1.default.when(\"standardContractType\", {\n    is: joi_1.default.equal(\"\"),\n    then: joi_1.default.string(),\n    otherwise: joi_1.default.string().required()\n  }),\n  chain: joi_1.default.string().insensitive().required(),\n  method: joi_1.default.when(\"standardContractType\", {\n    is: joi_1.default.equal(\"\"),\n    then: joi_1.default.string().valid(\"getBalance\", \"getBlockNumber\").required(),\n    otherwise: joi_1.default.string().required()\n  }),\n  parameters: joi_1.default.when(\"standardContractType\", {\n    is: joi_1.default.equal(\"\"),\n    then: joi_1.default.array(),\n    otherwise: joi_1.default.array().required()\n  }),\n  returnValueTest: joi_1.default.object({\n    comparator: joi_1.default.string().valid(\"==\", \">=\", \"<=\", \"!=\", \">\", \"<\").required(),\n    value: joi_1.default.alternatives(joi_1.default.number(), joi_1.default.string(), joi_1.default.array()).required()\n  }).required(),\n  inputArrayType: joi_1.default.when(\"standardContractType\", {\n    is: joi_1.default.equal(\"Custom\"),\n    then: joi_1.default.array().items(joi_1.default.string().valid(...solidityType)).required()\n  }),\n  outputType: joi_1.default.when(\"standardContractType\", {\n    is: joi_1.default.equal(\"Custom\"),\n    then: joi_1.default.string().valid(...solidityType).required()\n  })\n})).unique((a, b) => a.id === b.id);\nconst solanaConditions = joi_1.default.array().min(1).required().items(joi_1.default.object({\n  id: joi_1.default.number().min(1).required(),\n  contractAddress: joi_1.default.when(\"standardContractType\", {\n    is: joi_1.default.equal(\"\"),\n    then: joi_1.default.string(),\n    otherwise: joi_1.default.string().required()\n  }),\n  chain: joi_1.default.string().valid(...SupportedChains[\"SOLANA\"]).insensitive().required(),\n  method: joi_1.default.when(\"standardContractType\", {\n    is: joi_1.default.equal(\"\"),\n    then: joi_1.default.string().valid(\"getBalance\", \"getLastBlockTime\", \"getBlockHeight\").required(),\n    otherwise: joi_1.default.string().valid(\"getTokenAccountsByOwner\").required()\n  }),\n  standardContractType: joi_1.default.string().valid(\"spl-token\", \"\").insensitive().required(),\n  parameters: joi_1.default.when(\"standardContractType\", {\n    is: joi_1.default.equal(\"\"),\n    then: joi_1.default.array(),\n    otherwise: joi_1.default.array()\n  }),\n  pdaInterface: joi_1.default.object({\n    offset: joi_1.default.number().min(0),\n    selector: joi_1.default.string()\n  }).required(),\n  returnValueTest: joi_1.default.object({\n    comparator: joi_1.default.string().valid(\"==\", \">=\", \"<=\", \"!=\", \">\", \"<\").required(),\n    value: joi_1.default.alternatives(joi_1.default.number(), joi_1.default.string(), joi_1.default.array()).required()\n  }).required()\n})).unique((a, b) => a.id === b.id);\nconst coreumConditions = joi_1.default.array().min(1).required().items(joi_1.default.object({\n  id: joi_1.default.number().min(1).required(),\n  contractAddress: joi_1.default.when(\"standardContractType\", {\n    is: joi_1.default.equal(\"\"),\n    then: joi_1.default.string(),\n    otherwise: joi_1.default.string().required()\n  }),\n  denom: joi_1.default.string(),\n  classid: joi_1.default.string(),\n  standardContractType: joi_1.default.string().allow(\"\"),\n  chain: joi_1.default.string().valid(...SupportedChains[\"COREUM\"]).insensitive().required(),\n  method: joi_1.default.when(\"standardContractType\", {\n    is: joi_1.default.equal(\"\"),\n    then: joi_1.default.string().required(),\n    otherwise: joi_1.default.string().required()\n  }),\n  parameters: joi_1.default.when(\"standardContractType\", {\n    is: joi_1.default.equal(\"\"),\n    then: joi_1.default.array(),\n    otherwise: joi_1.default.array().required()\n  }),\n  returnValueTest: joi_1.default.object({\n    comparator: joi_1.default.string().valid(\"==\", \">=\", \"<=\", \"!=\", \">\", \"<\").required(),\n    value: joi_1.default.alternatives(joi_1.default.number(), joi_1.default.string(), joi_1.default.array()).required()\n  }).required()\n})).unique((a, b) => a.id === b.id);\nconst updateConditionSchema = joi_1.default.object({\n  chainType: joi_1.default.string().allow(\"\", null).empty([\"\", null]).default(\"EVM\").valid(\"EVM\", \"SOLANA\", \"COREUM\").insensitive(),\n  conditions: joi_1.default.when(\"chainType\", {\n    is: joi_1.default.equal(\"EVM\"),\n    then: evmConditions,\n    otherwise: joi_1.default.when(\"chainType\", {\n      is: joi_1.default.equal(\"SOLANA\"),\n      then: solanaConditions,\n      otherwise: coreumConditions\n    })\n  }),\n  decryptionType: joi_1.default.string().allow(\"\", null).empty([\"\", null]).default(\"ADDRESS\").valid(\"ADDRESS\", \"ACCESS_CONDITIONS\").insensitive(),\n  address: joi_1.default.string().required(),\n  cid: joi_1.default.string().required(),\n  // TO aggregator next iteration: \"1 or 2 and (3 xor 4)\"\n  aggregator: joi_1.default.when(\"conditions.length\", {\n    is: joi_1.default.number().greater(1),\n    then: joi_1.default.string().pattern(/( and | or )/i).required()\n  })\n});\nexports.updateConditionSchema = updateConditionSchema;\nconst accessConditionSchema = joi_1.default.object({\n  chainType: joi_1.default.string().allow(\"\", null).empty([\"\", null]).default(\"EVM\").valid(\"EVM\", \"SOLANA\", \"COREUM\").insensitive(),\n  decryptionType: joi_1.default.string().allow(\"\", null).empty([\"\", null]).default(\"ADDRESS\").valid(\"ADDRESS\", \"ACCESS_CONDITIONS\").insensitive(),\n  conditions: joi_1.default.when(\"chainType\", {\n    is: joi_1.default.equal(\"EVM\"),\n    then: evmConditions,\n    otherwise: joi_1.default.when(\"chainType\", {\n      is: joi_1.default.equal(\"SOLANA\"),\n      then: solanaConditions,\n      otherwise: coreumConditions\n    })\n  }),\n  address: joi_1.default.string().required(),\n  keyShards: joi_1.default.array().min(5).max(5).required().items(joi_1.default.object()),\n  cid: joi_1.default.string().required(),\n  // TO aggregator next iteration: \"1 or 2 and (3 xor 4)\"\n  aggregator: joi_1.default.when(\"conditions.length\", {\n    is: joi_1.default.number().greater(1),\n    then: joi_1.default.string().pattern(/( and | or )/i).required()\n  })\n});\nexports.accessConditionSchema = accessConditionSchema;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","accessConditionSchema","updateConditionSchema","joi_1","require","solidityType","SupportedChains","EVM","SOLANA","COREUM","evmConditions","default","array","min","required","items","object","id","number","standardContractType","string","valid","insensitive","contractAddress","when","is","equal","then","otherwise","chain","method","parameters","returnValueTest","comparator","alternatives","inputArrayType","outputType","unique","a","b","solanaConditions","pdaInterface","offset","selector","coreumConditions","denom","classid","allow","chainType","empty","conditions","decryptionType","address","cid","aggregator","greater","pattern","keyShards","max"],"sources":["D:/demo/node_modules/@lighthouse-web3/kavach/dist/methods/accessControl/validator.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.accessConditionSchema = exports.updateConditionSchema = void 0;\nconst joi_1 = __importDefault(require(\"joi\"));\nconst solidityType = [\n    \"address\",\n    \"address[]\",\n    \"bool\",\n    \"bool[]\",\n    \"bytes1\",\n    \"bytes2\",\n    \"bytes3\",\n    \"bytes4\",\n    \"bytes5\",\n    \"bytes6\",\n    \"bytes7\",\n    \"bytes8\",\n    \"bytes16\",\n    \"bytes32\",\n    \"bytes1[]\",\n    \"bytes2[]\",\n    \"bytes3[]\",\n    \"bytes4[]\",\n    \"bytes5[]\",\n    \"bytes6[]\",\n    \"bytes7[]\",\n    \"bytes8[]\",\n    \"bytes16[]\",\n    \"bytes32[]\",\n    \"uint8\",\n    \"uint16\",\n    \"uint24\",\n    \"uint32\",\n    \"uint40\",\n    \"uint48\",\n    \"uint64\",\n    \"uint128\",\n    \"uint192\",\n    \"uint256\",\n    \"int8\",\n    \"int16\",\n    \"int24\",\n    \"int32\",\n    \"int40\",\n    \"int48\",\n    \"int64\",\n    \"int128\",\n    \"int192\",\n    \"int256\",\n    \"uint8[]\",\n    \"uint16[]\",\n    \"uint24[]\",\n    \"uint32[]\",\n    \"uint40[]\",\n    \"uint48[]\",\n    \"uint64[]\",\n    \"uint128[]\",\n    \"uint192[]\",\n    \"uint256[]\",\n    \"int8[]\",\n    \"int16[]\",\n    \"int24[]\",\n    \"int32[]\",\n    \"int40[]\",\n    \"int48[]\",\n    \"int64[]\",\n    \"int128[]\",\n    \"int192[]\",\n    \"int256[]\",\n];\nconst SupportedChains = {\n    EVM: [],\n    SOLANA: [\"DEVNET\", \"TESTNET\", \"MAINNET\"],\n    COREUM: [\"Coreum_Devnet\", \"Coreum_Testnet\", \"Coreum_Mainnet\"],\n};\nconst evmConditions = joi_1.default.array()\n    .min(1)\n    .required()\n    .items(joi_1.default.object({\n    id: joi_1.default.number().min(1).required(),\n    standardContractType: joi_1.default.string()\n        .valid(\"ERC20\", \"ERC721\", \"ERC1155\", \"Custom\", \"\")\n        .insensitive()\n        .required(),\n    contractAddress: joi_1.default.when(\"standardContractType\", {\n        is: joi_1.default.equal(\"\"),\n        then: joi_1.default.string(),\n        otherwise: joi_1.default.string().required(),\n    }),\n    chain: joi_1.default.string().insensitive().required(),\n    method: joi_1.default.when(\"standardContractType\", {\n        is: joi_1.default.equal(\"\"),\n        then: joi_1.default.string().valid(\"getBalance\", \"getBlockNumber\").required(),\n        otherwise: joi_1.default.string().required(),\n    }),\n    parameters: joi_1.default.when(\"standardContractType\", {\n        is: joi_1.default.equal(\"\"),\n        then: joi_1.default.array(),\n        otherwise: joi_1.default.array().required(),\n    }),\n    returnValueTest: joi_1.default.object({\n        comparator: joi_1.default.string()\n            .valid(\"==\", \">=\", \"<=\", \"!=\", \">\", \"<\")\n            .required(),\n        value: joi_1.default.alternatives(joi_1.default.number(), joi_1.default.string(), joi_1.default.array()).required(),\n    }).required(),\n    inputArrayType: joi_1.default.when(\"standardContractType\", {\n        is: joi_1.default.equal(\"Custom\"),\n        then: joi_1.default.array()\n            .items(joi_1.default.string().valid(...solidityType))\n            .required(),\n    }),\n    outputType: joi_1.default.when(\"standardContractType\", {\n        is: joi_1.default.equal(\"Custom\"),\n        then: joi_1.default.string()\n            .valid(...solidityType)\n            .required(),\n    }),\n}))\n    .unique((a, b) => a.id === b.id);\nconst solanaConditions = joi_1.default.array()\n    .min(1)\n    .required()\n    .items(joi_1.default.object({\n    id: joi_1.default.number().min(1).required(),\n    contractAddress: joi_1.default.when(\"standardContractType\", {\n        is: joi_1.default.equal(\"\"),\n        then: joi_1.default.string(),\n        otherwise: joi_1.default.string().required(),\n    }),\n    chain: joi_1.default.string()\n        .valid(...SupportedChains[\"SOLANA\"])\n        .insensitive()\n        .required(),\n    method: joi_1.default.when(\"standardContractType\", {\n        is: joi_1.default.equal(\"\"),\n        then: joi_1.default.string()\n            .valid(\"getBalance\", \"getLastBlockTime\", \"getBlockHeight\")\n            .required(),\n        otherwise: joi_1.default.string().valid(\"getTokenAccountsByOwner\").required(),\n    }),\n    standardContractType: joi_1.default.string()\n        .valid(\"spl-token\", \"\")\n        .insensitive()\n        .required(),\n    parameters: joi_1.default.when(\"standardContractType\", {\n        is: joi_1.default.equal(\"\"),\n        then: joi_1.default.array(),\n        otherwise: joi_1.default.array(),\n    }),\n    pdaInterface: joi_1.default.object({\n        offset: joi_1.default.number().min(0),\n        selector: joi_1.default.string(),\n    }).required(),\n    returnValueTest: joi_1.default.object({\n        comparator: joi_1.default.string()\n            .valid(\"==\", \">=\", \"<=\", \"!=\", \">\", \"<\")\n            .required(),\n        value: joi_1.default.alternatives(joi_1.default.number(), joi_1.default.string(), joi_1.default.array()).required(),\n    }).required(),\n}))\n    .unique((a, b) => a.id === b.id);\nconst coreumConditions = joi_1.default.array()\n    .min(1)\n    .required()\n    .items(joi_1.default.object({\n    id: joi_1.default.number().min(1).required(),\n    contractAddress: joi_1.default.when(\"standardContractType\", {\n        is: joi_1.default.equal(\"\"),\n        then: joi_1.default.string(),\n        otherwise: joi_1.default.string().required(),\n    }),\n    denom: joi_1.default.string(),\n    classid: joi_1.default.string(),\n    standardContractType: joi_1.default.string().allow(\"\"),\n    chain: joi_1.default.string()\n        .valid(...SupportedChains[\"COREUM\"])\n        .insensitive()\n        .required(),\n    method: joi_1.default.when(\"standardContractType\", {\n        is: joi_1.default.equal(\"\"),\n        then: joi_1.default.string().required(),\n        otherwise: joi_1.default.string().required(),\n    }),\n    parameters: joi_1.default.when(\"standardContractType\", {\n        is: joi_1.default.equal(\"\"),\n        then: joi_1.default.array(),\n        otherwise: joi_1.default.array().required(),\n    }),\n    returnValueTest: joi_1.default.object({\n        comparator: joi_1.default.string()\n            .valid(\"==\", \">=\", \"<=\", \"!=\", \">\", \"<\")\n            .required(),\n        value: joi_1.default.alternatives(joi_1.default.number(), joi_1.default.string(), joi_1.default.array()).required(),\n    }).required(),\n}))\n    .unique((a, b) => a.id === b.id);\nconst updateConditionSchema = joi_1.default.object({\n    chainType: joi_1.default.string()\n        .allow(\"\", null)\n        .empty([\"\", null])\n        .default(\"EVM\")\n        .valid(\"EVM\", \"SOLANA\", \"COREUM\")\n        .insensitive(),\n    conditions: joi_1.default.when(\"chainType\", {\n        is: joi_1.default.equal(\"EVM\"),\n        then: evmConditions,\n        otherwise: joi_1.default.when(\"chainType\", {\n            is: joi_1.default.equal(\"SOLANA\"),\n            then: solanaConditions,\n            otherwise: coreumConditions,\n        }),\n    }),\n    decryptionType: joi_1.default.string()\n        .allow(\"\", null)\n        .empty([\"\", null])\n        .default(\"ADDRESS\")\n        .valid(\"ADDRESS\", \"ACCESS_CONDITIONS\")\n        .insensitive(),\n    address: joi_1.default.string().required(),\n    cid: joi_1.default.string().required(),\n    // TO aggregator next iteration: \"1 or 2 and (3 xor 4)\"\n    aggregator: joi_1.default.when(\"conditions.length\", {\n        is: joi_1.default.number().greater(1),\n        then: joi_1.default.string()\n            .pattern(/( and | or )/i)\n            .required(),\n    }),\n});\nexports.updateConditionSchema = updateConditionSchema;\nconst accessConditionSchema = joi_1.default.object({\n    chainType: joi_1.default.string()\n        .allow(\"\", null)\n        .empty([\"\", null])\n        .default(\"EVM\")\n        .valid(\"EVM\", \"SOLANA\", \"COREUM\")\n        .insensitive(),\n    decryptionType: joi_1.default.string()\n        .allow(\"\", null)\n        .empty([\"\", null])\n        .default(\"ADDRESS\")\n        .valid(\"ADDRESS\", \"ACCESS_CONDITIONS\")\n        .insensitive(),\n    conditions: joi_1.default.when(\"chainType\", {\n        is: joi_1.default.equal(\"EVM\"),\n        then: evmConditions,\n        otherwise: joi_1.default.when(\"chainType\", {\n            is: joi_1.default.equal(\"SOLANA\"),\n            then: solanaConditions,\n            otherwise: coreumConditions,\n        }),\n    }),\n    address: joi_1.default.string().required(),\n    keyShards: joi_1.default.array().min(5).max(5).required().items(joi_1.default.object()),\n    cid: joi_1.default.string().required(),\n    // TO aggregator next iteration: \"1 or 2 and (3 xor 4)\"\n    aggregator: joi_1.default.when(\"conditions.length\", {\n        is: joi_1.default.number().greater(1),\n        then: joi_1.default.string()\n            .pattern(/( and | or )/i)\n            .required(),\n    }),\n});\nexports.accessConditionSchema = accessConditionSchema;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}