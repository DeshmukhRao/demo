{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst lighthouse_config_1 = require(\"../../../lighthouse.config\");\nconst util_1 = require(\"../../utils/util\");\nexports.default = async (text, apiKey, name) => {\n  try {\n    const token = 'Bearer ' + apiKey;\n    const endpoint = lighthouse_config_1.lighthouseConfig.lighthouseNode + '/api/v0/add';\n    // Upload file\n    const formData = new FormData();\n    const blob = new Blob([text], {\n      type: 'text/plain'\n    });\n    formData.append('file', blob, name);\n    const response = await (0, util_1.fetchWithTimeout)(endpoint, {\n      method: 'POST',\n      body: formData,\n      timeout: 7200000,\n      headers: {\n        'Mime-Type': 'text/plain',\n        Authorization: token\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Request failed with status code ${response.status}`);\n    }\n    const data = await response.json();\n    return {\n      data\n    };\n  } catch (error) {\n    throw new Error(error?.message);\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","lighthouse_config_1","require","util_1","default","text","apiKey","name","token","endpoint","lighthouseConfig","lighthouseNode","formData","FormData","blob","Blob","type","append","response","fetchWithTimeout","method","body","timeout","headers","Authorization","ok","Error","status","data","json","error","message"],"sources":["D:/demo/node_modules/@lighthouse-web3/sdk/dist/Lighthouse/upload/text/browser.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lighthouse_config_1 = require(\"../../../lighthouse.config\");\nconst util_1 = require(\"../../utils/util\");\nexports.default = async (text, apiKey, name) => {\n    try {\n        const token = 'Bearer ' + apiKey;\n        const endpoint = lighthouse_config_1.lighthouseConfig.lighthouseNode + '/api/v0/add';\n        // Upload file\n        const formData = new FormData();\n        const blob = new Blob([text], { type: 'text/plain' });\n        formData.append('file', blob, name);\n        const response = await (0, util_1.fetchWithTimeout)(endpoint, {\n            method: 'POST',\n            body: formData,\n            timeout: 7200000,\n            headers: {\n                'Mime-Type': 'text/plain',\n                Authorization: token,\n            },\n        });\n        if (!response.ok) {\n            throw new Error(`Request failed with status code ${response.status}`);\n        }\n        const data = await response.json();\n        return { data };\n    }\n    catch (error) {\n        throw new Error(error?.message);\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,mBAAmB,GAAGC,OAAO,CAAC,4BAA4B,CAAC;AACjE,MAAMC,MAAM,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC1CH,OAAO,CAACK,OAAO,GAAG,OAAOC,IAAI,EAAEC,MAAM,EAAEC,IAAI,KAAK;EAC5C,IAAI;IACA,MAAMC,KAAK,GAAG,SAAS,GAAGF,MAAM;IAChC,MAAMG,QAAQ,GAAGR,mBAAmB,CAACS,gBAAgB,CAACC,cAAc,GAAG,aAAa;IACpF;IACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACV,IAAI,CAAC,EAAE;MAAEW,IAAI,EAAE;IAAa,CAAC,CAAC;IACrDJ,QAAQ,CAACK,MAAM,CAAC,MAAM,EAAEH,IAAI,EAAEP,IAAI,CAAC;IACnC,MAAMW,QAAQ,GAAG,MAAM,CAAC,CAAC,EAAEf,MAAM,CAACgB,gBAAgB,EAAEV,QAAQ,EAAE;MAC1DW,MAAM,EAAE,MAAM;MACdC,IAAI,EAAET,QAAQ;MACdU,OAAO,EAAE,OAAO;MAChBC,OAAO,EAAE;QACL,WAAW,EAAE,YAAY;QACzBC,aAAa,EAAEhB;MACnB;IACJ,CAAC,CAAC;IACF,IAAI,CAACU,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,mCAAmCR,QAAQ,CAACS,MAAM,EAAE,CAAC;IACzE;IACA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClC,OAAO;MAAED;IAAK,CAAC;EACnB,CAAC,CACD,OAAOE,KAAK,EAAE;IACV,MAAM,IAAIJ,KAAK,CAACI,KAAK,EAAEC,OAAO,CAAC;EACnC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}