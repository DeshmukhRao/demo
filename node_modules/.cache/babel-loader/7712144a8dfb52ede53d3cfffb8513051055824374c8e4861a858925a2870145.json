{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* istanbul ignore file */\nconst ethers_1 = require(\"ethers\");\nconst erc20_1 = __importDefault(require(\"./abi/erc20\"));\nconst lighthouseContract_1 = __importDefault(require(\"./abi/lighthouseContract\"));\nconst lighthouse_config_1 = require(\"../../../lighthouse.config\");\nexports.default = async (amount, network, token, privateKey) => {\n  try {\n    if (!privateKey) {\n      throw new Error('Private Key not found!!!');\n    }\n    const config = lighthouse_config_1.lighthouseConfig[network];\n    if (!config) {\n      throw new Error('Unsupported Network!!!');\n    }\n    const provider = new ethers_1.ethers.JsonRpcProvider(config.rpc);\n    const getFeeData = await provider.getFeeData();\n    const signer = new ethers_1.ethers.Wallet(privateKey, provider);\n    if (token.toLowerCase() === 'native') {\n      const gasEstimate = await signer.estimateGas({\n        to: config.lighthouse_contract_address,\n        value: amount\n      });\n      const tx = await signer.sendTransaction({\n        to: config.lighthouse_contract_address,\n        value: amount,\n        gasLimit: gasEstimate,\n        gasPrice: getFeeData.gasPrice\n      });\n      await tx.wait();\n      return tx;\n    } else {\n      const tokenAddress = config[`${token.toLowerCase()}_contract_address`];\n      const paymentContract = new ethers_1.ethers.Contract(config.lighthouse_contract_address, lighthouseContract_1.default, signer);\n      const erc20Contract = new ethers_1.ethers.Contract(tokenAddress, erc20_1.default, signer);\n      const approvalData = erc20Contract.interface.encodeFunctionData('approve', [config.lighthouse_contract_address, amount]);\n      const approvalTxObject = {\n        to: tokenAddress,\n        data: approvalData\n      };\n      const gasEstimateForApproval = await signer.estimateGas(approvalTxObject);\n      const approvalTx = await erc20Contract.approve(config.lighthouse_contract_address, amount, {\n        gasLimit: gasEstimateForApproval,\n        gasPrice: getFeeData.gasPrice\n      });\n      await approvalTx.wait();\n      const transferData = paymentContract.interface.encodeFunctionData('receiveToken', [amount, tokenAddress]);\n      const transferTxObject = {\n        to: config.lighthouse_contract_address,\n        data: transferData\n      };\n      const gasEstimateForTransfer = await signer.estimateGas(transferTxObject);\n      const tx = await paymentContract.receiveToken(amount, tokenAddress, {\n        gasLimit: gasEstimateForTransfer,\n        gasPrice: getFeeData.gasPrice\n      });\n      await tx.wait();\n      return tx;\n    }\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","ethers_1","require","erc20_1","lighthouseContract_1","lighthouse_config_1","default","amount","network","token","privateKey","Error","config","lighthouseConfig","provider","ethers","JsonRpcProvider","rpc","getFeeData","signer","Wallet","toLowerCase","gasEstimate","estimateGas","to","lighthouse_contract_address","tx","sendTransaction","gasLimit","gasPrice","wait","tokenAddress","paymentContract","Contract","erc20Contract","approvalData","interface","encodeFunctionData","approvalTxObject","data","gasEstimateForApproval","approvalTx","approve","transferData","transferTxObject","gasEstimateForTransfer","receiveToken","error","message"],"sources":["D:/demo/node_modules/@lighthouse-web3/sdk/dist/Lighthouse/payPerDeal/fund/node.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* istanbul ignore file */\nconst ethers_1 = require(\"ethers\");\nconst erc20_1 = __importDefault(require(\"./abi/erc20\"));\nconst lighthouseContract_1 = __importDefault(require(\"./abi/lighthouseContract\"));\nconst lighthouse_config_1 = require(\"../../../lighthouse.config\");\nexports.default = async (amount, network, token, privateKey) => {\n    try {\n        if (!privateKey) {\n            throw new Error('Private Key not found!!!');\n        }\n        const config = lighthouse_config_1.lighthouseConfig[network];\n        if (!config) {\n            throw new Error('Unsupported Network!!!');\n        }\n        const provider = new ethers_1.ethers.JsonRpcProvider(config.rpc);\n        const getFeeData = await provider.getFeeData();\n        const signer = new ethers_1.ethers.Wallet(privateKey, provider);\n        if (token.toLowerCase() === 'native') {\n            const gasEstimate = await signer.estimateGas({\n                to: config.lighthouse_contract_address,\n                value: amount,\n            });\n            const tx = await signer.sendTransaction({\n                to: config.lighthouse_contract_address,\n                value: amount,\n                gasLimit: gasEstimate,\n                gasPrice: getFeeData.gasPrice,\n            });\n            await tx.wait();\n            return tx;\n        }\n        else {\n            const tokenAddress = config[`${token.toLowerCase()}_contract_address`];\n            const paymentContract = new ethers_1.ethers.Contract(config.lighthouse_contract_address, lighthouseContract_1.default, signer);\n            const erc20Contract = new ethers_1.ethers.Contract(tokenAddress, erc20_1.default, signer);\n            const approvalData = erc20Contract.interface.encodeFunctionData('approve', [config.lighthouse_contract_address, amount]);\n            const approvalTxObject = {\n                to: tokenAddress,\n                data: approvalData,\n            };\n            const gasEstimateForApproval = await signer.estimateGas(approvalTxObject);\n            const approvalTx = await erc20Contract.approve(config.lighthouse_contract_address, amount, {\n                gasLimit: gasEstimateForApproval,\n                gasPrice: getFeeData.gasPrice,\n            });\n            await approvalTx.wait();\n            const transferData = paymentContract.interface.encodeFunctionData('receiveToken', [amount, tokenAddress]);\n            const transferTxObject = {\n                to: config.lighthouse_contract_address,\n                data: transferData,\n            };\n            const gasEstimateForTransfer = await signer.estimateGas(transferTxObject);\n            const tx = await paymentContract.receiveToken(amount, tokenAddress, {\n                gasLimit: gasEstimateForTransfer,\n                gasPrice: getFeeData.gasPrice,\n            });\n            await tx.wait();\n            return tx;\n        }\n    }\n    catch (error) {\n        throw new Error(error.message);\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}