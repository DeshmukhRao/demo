{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* istanbul ignore file */\nconst getBalance_1 = __importDefault(require(\"../getBalance\"));\nconst node_1 = require(\"../upload/files/node\");\n// Function return cost and file metadata\nconst getCosting = async (path, apiKey) => {\n  const fs = eval(`require`)('fs-extra');\n  const mime = eval(`require`)('mime-types');\n  // Get users data usage\n  const user_data_usage = (await (0, getBalance_1.default)(apiKey)).data;\n  if (fs.lstatSync(path).isDirectory()) {\n    // Get metadata and cid for all files\n    const sources = await (0, node_1.walk)(path);\n    const metaData = [];\n    let totalSize = 0;\n    for (let i = 0; i < sources.length; i++) {\n      const stats = fs.statSync(sources[i]);\n      const mimeType = mime.lookup(sources[i]);\n      const fileSizeInBytes = stats.size;\n      const fileName = sources[i].split('/').pop();\n      totalSize += fileSizeInBytes;\n      metaData.push({\n        fileSize: fileSizeInBytes,\n        mimeType: mimeType,\n        fileName: fileName\n      });\n    }\n    // Return data\n    return {\n      data: {\n        metaData: metaData,\n        dataLimit: user_data_usage.dataLimit,\n        dataUsed: user_data_usage.dataUsed,\n        totalSize: totalSize\n      }\n    };\n  } else {\n    const stats = fs.statSync(path);\n    const mimeType = mime.lookup(path);\n    const fileSizeInBytes = stats.size;\n    const fileName = path.split('/').pop();\n    // return response data\n    const metaData = [{\n      fileSize: fileSizeInBytes,\n      mimeType: mimeType,\n      fileName: fileName\n    }];\n    return {\n      data: {\n        metaData: metaData,\n        dataLimit: user_data_usage.dataLimit,\n        dataUsed: user_data_usage.dataUsed,\n        totalSize: fileSizeInBytes\n      }\n    };\n  }\n};\nexports.default = async (path, apiKey) => {\n  try {\n    return await getCosting(path, apiKey);\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","getBalance_1","require","node_1","getCosting","path","apiKey","fs","eval","mime","user_data_usage","default","data","lstatSync","isDirectory","sources","walk","metaData","totalSize","i","length","stats","statSync","mimeType","lookup","fileSizeInBytes","size","fileName","split","pop","push","fileSize","dataLimit","dataUsed","error","Error","message"],"sources":["D:/demo/node_modules/@lighthouse-web3/sdk/dist/Lighthouse/getQuote/index.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* istanbul ignore file */\nconst getBalance_1 = __importDefault(require(\"../getBalance\"));\nconst node_1 = require(\"../upload/files/node\");\n// Function return cost and file metadata\nconst getCosting = async (path, apiKey) => {\n    const fs = eval(`require`)('fs-extra');\n    const mime = eval(`require`)('mime-types');\n    // Get users data usage\n    const user_data_usage = (await (0, getBalance_1.default)(apiKey)).data;\n    if (fs.lstatSync(path).isDirectory()) {\n        // Get metadata and cid for all files\n        const sources = await (0, node_1.walk)(path);\n        const metaData = [];\n        let totalSize = 0;\n        for (let i = 0; i < sources.length; i++) {\n            const stats = fs.statSync(sources[i]);\n            const mimeType = mime.lookup(sources[i]);\n            const fileSizeInBytes = stats.size;\n            const fileName = sources[i].split('/').pop();\n            totalSize += fileSizeInBytes;\n            metaData.push({\n                fileSize: fileSizeInBytes,\n                mimeType: mimeType,\n                fileName: fileName,\n            });\n        }\n        // Return data\n        return {\n            data: {\n                metaData: metaData,\n                dataLimit: user_data_usage.dataLimit,\n                dataUsed: user_data_usage.dataUsed,\n                totalSize: totalSize,\n            },\n        };\n    }\n    else {\n        const stats = fs.statSync(path);\n        const mimeType = mime.lookup(path);\n        const fileSizeInBytes = stats.size;\n        const fileName = path.split('/').pop();\n        // return response data\n        const metaData = [\n            {\n                fileSize: fileSizeInBytes,\n                mimeType: mimeType,\n                fileName: fileName,\n            },\n        ];\n        return {\n            data: {\n                metaData: metaData,\n                dataLimit: user_data_usage.dataLimit,\n                dataUsed: user_data_usage.dataUsed,\n                totalSize: fileSizeInBytes,\n            },\n        };\n    }\n};\nexports.default = async (path, apiKey) => {\n    try {\n        return await getCosting(path, apiKey);\n    }\n    catch (error) {\n        throw new Error(error.message);\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}