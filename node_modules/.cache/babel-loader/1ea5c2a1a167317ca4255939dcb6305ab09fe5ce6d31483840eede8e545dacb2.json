{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.accessControl = void 0;\nconst config_1 = __importDefault(require(\"../../config\"));\nconst validator_1 = require(\"./validator\");\nconst index_1 = require(\"../../util/index\");\nconst accessControl = async (address, cid, auth_token, conditions, aggregator, chainType = \"evm\", keyShards = [], decryptionType = \"ADDRESS\") => {\n  try {\n    if (!Array.isArray(keyShards) || keyShards.length != 5 && keyShards.length != 0) {\n      throw new Error(\"keyShards must be an array of 5 objects\");\n    }\n    if (!(0, index_1.isCidReg)(cid)) {\n      throw new Error(\"Invalid CID\");\n    }\n    const {\n      error\n    } = keyShards.length == 5 ? validator_1.accessConditionSchema.validate({\n      address,\n      cid,\n      conditions,\n      aggregator,\n      decryptionType,\n      chainType,\n      keyShards\n    }) : validator_1.updateConditionSchema.validate({\n      address,\n      cid,\n      conditions,\n      aggregator,\n      chainType\n    });\n    if (error) {\n      throw new Error(`Condition validation error: ${error.message}`);\n    }\n    const nodeId = [1, 2, 3, 4, 5];\n    const nodeUrl = nodeId.map(elem => config_1.default.isDev ? `:900${elem}/api/fileAccessConditions/${elem}` : `/api/fileAccessConditions/${elem}`);\n    // send encryption key\n    const requestData = async (url, index) => {\n      try {\n        return keyShards.length === 5 ? await (0, index_1.API_NODE_HANDLER)(url, \"POST\", auth_token, {\n          address,\n          cid,\n          conditions,\n          aggregator,\n          decryptionType,\n          chainType,\n          payload: keyShards[index]\n        }) : await (0, index_1.API_NODE_HANDLER)(url, \"PUT\", auth_token, {\n          address,\n          cid,\n          conditions,\n          aggregator,\n          chainType\n        });\n      } catch (error) {\n        return {\n          isSuccess: false,\n          error: JSON.parse(error.message)\n        };\n      }\n    };\n    const data = [];\n    for (const [index, url] of nodeUrl.entries()) {\n      const response = await requestData(url, index);\n      if (response.error) await new Promise(resolve => setTimeout(resolve, 1000)); // Wait for 1 second before retrying\n      data.push(response);\n    }\n    return {\n      isSuccess: (0, index_1.isEqual)(...data.map(e => e.message)) && data[0]?.message === \"success\",\n      error: null\n    };\n  } catch (err) {\n    return {\n      isSuccess: false,\n      error: JSON.parse(err?.message)\n    };\n  }\n};\nexports.accessControl = accessControl;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","accessControl","config_1","require","validator_1","index_1","address","cid","auth_token","conditions","aggregator","chainType","keyShards","decryptionType","Array","isArray","length","Error","isCidReg","error","accessConditionSchema","validate","updateConditionSchema","message","nodeId","nodeUrl","map","elem","default","isDev","requestData","url","index","API_NODE_HANDLER","payload","isSuccess","JSON","parse","data","entries","response","Promise","resolve","setTimeout","push","isEqual","e","err"],"sources":["D:/demo/node_modules/@lighthouse-web3/kavach/dist/methods/accessControl/index.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.accessControl = void 0;\nconst config_1 = __importDefault(require(\"../../config\"));\nconst validator_1 = require(\"./validator\");\nconst index_1 = require(\"../../util/index\");\nconst accessControl = async (address, cid, auth_token, conditions, aggregator, chainType = \"evm\", keyShards = [], decryptionType = \"ADDRESS\") => {\n    try {\n        if (!Array.isArray(keyShards) ||\n            (keyShards.length != 5 && keyShards.length != 0)) {\n            throw new Error(\"keyShards must be an array of 5 objects\");\n        }\n        if (!(0, index_1.isCidReg)(cid)) {\n            throw new Error(\"Invalid CID\");\n        }\n        const { error } = keyShards.length == 5\n            ? validator_1.accessConditionSchema.validate({\n                address,\n                cid,\n                conditions,\n                aggregator,\n                decryptionType,\n                chainType,\n                keyShards,\n            })\n            : validator_1.updateConditionSchema.validate({\n                address,\n                cid,\n                conditions,\n                aggregator,\n                chainType,\n            });\n        if (error) {\n            throw new Error(`Condition validation error: ${error.message}`);\n        }\n        const nodeId = [1, 2, 3, 4, 5];\n        const nodeUrl = nodeId.map((elem) => config_1.default.isDev\n            ? `:900${elem}/api/fileAccessConditions/${elem}`\n            : `/api/fileAccessConditions/${elem}`);\n        // send encryption key\n        const requestData = async (url, index) => {\n            try {\n                return keyShards.length === 5\n                    ? await (0, index_1.API_NODE_HANDLER)(url, \"POST\", auth_token, {\n                        address,\n                        cid,\n                        conditions,\n                        aggregator,\n                        decryptionType,\n                        chainType,\n                        payload: keyShards[index],\n                    })\n                    : await (0, index_1.API_NODE_HANDLER)(url, \"PUT\", auth_token, {\n                        address,\n                        cid,\n                        conditions,\n                        aggregator,\n                        chainType,\n                    });\n            }\n            catch (error) {\n                return {\n                    isSuccess: false,\n                    error: JSON.parse(error.message),\n                };\n            }\n        };\n        const data = [];\n        for (const [index, url] of nodeUrl.entries()) {\n            const response = await requestData(url, index);\n            if (response.error)\n                await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait for 1 second before retrying\n            data.push(response);\n        }\n        return {\n            isSuccess: (0, index_1.isEqual)(...data.map((e) => e.message)) &&\n                data[0]?.message === \"success\",\n            error: null,\n        };\n    }\n    catch (err) {\n        return { isSuccess: false, error: JSON.parse(err?.message) };\n    }\n};\nexports.accessControl = accessControl;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}