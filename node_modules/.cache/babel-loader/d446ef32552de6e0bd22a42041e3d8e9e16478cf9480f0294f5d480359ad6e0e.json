{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* istanbul ignore file */\nconst encryptionNode_1 = require(\"../../encryptionNode\");\nconst kavach_1 = require(\"@lighthouse-web3/kavach\");\nconst lighthouse_config_1 = require(\"../../../../lighthouse.config\");\nconst util_1 = require(\"../../../utils/util\");\nexports.default = async (text, apiKey, publicKey, signedMessage, name) => {\n  try {\n    const token = 'Bearer ' + apiKey;\n    const endpoint = lighthouse_config_1.lighthouseConfig.lighthouseNode + '/api/v0/add';\n    // Upload file\n    const formData = new FormData();\n    const {\n      masterKey: fileEncryptionKey,\n      keyShards\n    } = await (0, kavach_1.generate)();\n    const encryptedData = await (0, encryptionNode_1.encryptFile)(Buffer.from(text), fileEncryptionKey);\n    const blob = new Blob([Buffer.from(encryptedData)]);\n    formData.append('file', blob, name);\n    const response = await (0, util_1.fetchWithTimeout)(endpoint, {\n      method: 'POST',\n      body: formData,\n      credentials: 'include',\n      timeout: 7200000,\n      headers: {\n        Encryption: 'true',\n        'Mime-Type': 'text/plain',\n        Authorization: token\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const responseData = await response.json();\n    const {\n      error\n    } = await (0, kavach_1.saveShards)(publicKey, responseData.Hash, signedMessage, keyShards);\n    if (error) {\n      throw new Error('Error encrypting file');\n    }\n    return {\n      data: responseData\n    };\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","encryptionNode_1","require","kavach_1","lighthouse_config_1","util_1","default","text","apiKey","publicKey","signedMessage","name","token","endpoint","lighthouseConfig","lighthouseNode","formData","FormData","masterKey","fileEncryptionKey","keyShards","generate","encryptedData","encryptFile","Buffer","from","blob","Blob","append","response","fetchWithTimeout","method","body","credentials","timeout","headers","Encryption","Authorization","ok","Error","status","responseData","json","error","saveShards","Hash","data","message"],"sources":["D:/demo/node_modules/@lighthouse-web3/sdk/dist/Lighthouse/uploadEncrypted/encrypt/text/node.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* istanbul ignore file */\nconst encryptionNode_1 = require(\"../../encryptionNode\");\nconst kavach_1 = require(\"@lighthouse-web3/kavach\");\nconst lighthouse_config_1 = require(\"../../../../lighthouse.config\");\nconst util_1 = require(\"../../../utils/util\");\nexports.default = async (text, apiKey, publicKey, signedMessage, name) => {\n    try {\n        const token = 'Bearer ' + apiKey;\n        const endpoint = lighthouse_config_1.lighthouseConfig.lighthouseNode + '/api/v0/add';\n        // Upload file\n        const formData = new FormData();\n        const { masterKey: fileEncryptionKey, keyShards } = await (0, kavach_1.generate)();\n        const encryptedData = await (0, encryptionNode_1.encryptFile)(Buffer.from(text), fileEncryptionKey);\n        const blob = new Blob([Buffer.from(encryptedData)]);\n        formData.append('file', blob, name);\n        const response = await (0, util_1.fetchWithTimeout)(endpoint, {\n            method: 'POST',\n            body: formData,\n            credentials: 'include',\n            timeout: 7200000,\n            headers: {\n                Encryption: 'true',\n                'Mime-Type': 'text/plain',\n                Authorization: token,\n            },\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const responseData = (await response.json());\n        const { error } = await (0, kavach_1.saveShards)(publicKey, responseData.Hash, signedMessage, keyShards);\n        if (error) {\n            throw new Error('Error encrypting file');\n        }\n        return { data: responseData };\n    }\n    catch (error) {\n        throw new Error(error.message);\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D;AACA,MAAMC,gBAAgB,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AACxD,MAAMC,QAAQ,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AACnD,MAAME,mBAAmB,GAAGF,OAAO,CAAC,+BAA+B,CAAC;AACpE,MAAMG,MAAM,GAAGH,OAAO,CAAC,qBAAqB,CAAC;AAC7CH,OAAO,CAACO,OAAO,GAAG,OAAOC,IAAI,EAAEC,MAAM,EAAEC,SAAS,EAAEC,aAAa,EAAEC,IAAI,KAAK;EACtE,IAAI;IACA,MAAMC,KAAK,GAAG,SAAS,GAAGJ,MAAM;IAChC,MAAMK,QAAQ,GAAGT,mBAAmB,CAACU,gBAAgB,CAACC,cAAc,GAAG,aAAa;IACpF;IACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/B,MAAM;MAAEC,SAAS,EAAEC,iBAAiB;MAAEC;IAAU,CAAC,GAAG,MAAM,CAAC,CAAC,EAAEjB,QAAQ,CAACkB,QAAQ,EAAE,CAAC;IAClF,MAAMC,aAAa,GAAG,MAAM,CAAC,CAAC,EAAErB,gBAAgB,CAACsB,WAAW,EAAEC,MAAM,CAACC,IAAI,CAAClB,IAAI,CAAC,EAAEY,iBAAiB,CAAC;IACnG,MAAMO,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACH,MAAM,CAACC,IAAI,CAACH,aAAa,CAAC,CAAC,CAAC;IACnDN,QAAQ,CAACY,MAAM,CAAC,MAAM,EAAEF,IAAI,EAAEf,IAAI,CAAC;IACnC,MAAMkB,QAAQ,GAAG,MAAM,CAAC,CAAC,EAAExB,MAAM,CAACyB,gBAAgB,EAAEjB,QAAQ,EAAE;MAC1DkB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEhB,QAAQ;MACdiB,WAAW,EAAE,SAAS;MACtBC,OAAO,EAAE,OAAO;MAChBC,OAAO,EAAE;QACLC,UAAU,EAAE,MAAM;QAClB,WAAW,EAAE,YAAY;QACzBC,aAAa,EAAEzB;MACnB;IACJ,CAAC,CAAC;IACF,IAAI,CAACiB,QAAQ,CAACS,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBV,QAAQ,CAACW,MAAM,EAAE,CAAC;IAC7D;IACA,MAAMC,YAAY,GAAI,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAE;IAC5C,MAAM;MAAEC;IAAM,CAAC,GAAG,MAAM,CAAC,CAAC,EAAExC,QAAQ,CAACyC,UAAU,EAAEnC,SAAS,EAAEgC,YAAY,CAACI,IAAI,EAAEnC,aAAa,EAAEU,SAAS,CAAC;IACxG,IAAIuB,KAAK,EAAE;MACP,MAAM,IAAIJ,KAAK,CAAC,uBAAuB,CAAC;IAC5C;IACA,OAAO;MAAEO,IAAI,EAAEL;IAAa,CAAC;EACjC,CAAC,CACD,OAAOE,KAAK,EAAE;IACV,MAAM,IAAIJ,KAAK,CAACI,KAAK,CAACI,OAAO,CAAC;EAClC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}