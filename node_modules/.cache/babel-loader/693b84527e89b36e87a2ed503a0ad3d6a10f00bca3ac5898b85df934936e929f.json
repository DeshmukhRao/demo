{"ast":null,"code":"/**\n * @param createModule Async factory that returns an emcc initialized Module\n * In node, `const createModule = require(`./bls_c.js`)`\n */\nconst ETH_MODE = true;\nconst _blsSetupFactory = createModule => {\n  const exports = {};\n  /* eslint-disable */\n  exports.BN254 = 0;\n  exports.BN381_1 = 1;\n  exports.BN_SNARK1 = 4;\n  exports.BLS12_381 = 5;\n  exports.ethMode = ETH_MODE;\n  exports.ETH_MODE_DRAFT_05 = 1;\n  exports.ETH_MODE_DRAFT_06 = 2;\n  exports.ETH_MODE_DRAFT_07 = 3;\n  exports.MAP_TO_MODE_ORIGINAL = 0;\n  exports.MAP_TO_MODE_HASH_TO_CURVE = 5; // IRTF\n\n  function blsSetup(exports, curveType) {\n    const mod = exports.mod;\n    const MCLBN_FP_UNIT_SIZE = 6;\n    const MCLBN_FP_SIZE = MCLBN_FP_UNIT_SIZE * 8;\n    const MCLBN_FR_UNIT_SIZE = 4;\n    const MCLBN_FR_SIZE = MCLBN_FR_UNIT_SIZE * 8;\n    const BLS_COMPILER_TIME_VAR_ADJ = exports.ethMode ? 200 : 0;\n    const MCLBN_COMPILED_TIME_VAR = MCLBN_FR_UNIT_SIZE * 10 + MCLBN_FP_UNIT_SIZE + BLS_COMPILER_TIME_VAR_ADJ;\n    const BLS_ID_SIZE = MCLBN_FR_SIZE;\n    const BLS_SECRETKEY_SIZE = MCLBN_FR_SIZE;\n    const BLS_PUBLICKEY_SIZE = MCLBN_FP_SIZE * 3 * (exports.ethMode ? 1 : 2);\n    const BLS_SIGNATURE_SIZE = MCLBN_FP_SIZE * 3 * (exports.ethMode ? 2 : 1);\n    const _malloc = size => {\n      return mod._blsMalloc(size);\n    };\n    const _free = pos => {\n      mod._blsFree(pos);\n    };\n    const ptrToAsciiStr = (pos, n) => {\n      let s = '';\n      for (let i = 0; i < n; i++) {\n        s += String.fromCharCode(mod.HEAP8[pos + i]);\n      }\n      return s;\n    };\n    const asciiStrToPtr = (pos, s) => {\n      for (let i = 0; i < s.length; i++) {\n        mod.HEAP8[pos + i] = s.charCodeAt(i);\n      }\n    };\n    exports.toHex = (a, start, n) => {\n      let s = '';\n      for (let i = 0; i < n; i++) {\n        s += ('0' + a[start + i].toString(16)).slice(-2);\n      }\n      return s;\n    };\n    // Uint8Array to hex string\n    exports.toHexStr = a => {\n      return exports.toHex(a, 0, a.length);\n    };\n    // hex string to Uint8Array\n    exports.fromHexStr = s => {\n      if (s.length & 1) throw new Error('fromHexStr:length must be even ' + s.length);\n      const n = s.length / 2;\n      const a = new Uint8Array(n);\n      for (let i = 0; i < n; i++) {\n        a[i] = parseInt(s.slice(i * 2, i * 2 + 2), 16);\n      }\n      return a;\n    };\n    ///////////////////////////\n    const copyToUint32Array = (a, pos) => {\n      a.set(mod.HEAP32.subarray(pos / 4, pos / 4 + a.length));\n      //    for (let i = 0; i < a.length; i++) {\n      //      a[i] = mod.HEAP32[pos / 4 + i]\n      //    }\n    };\n    const copyFromUint32Array = (pos, a) => {\n      mod.HEAP32.set(a, pos / 4);\n      //    for (let i = 0; i < a.length; i++) {\n      //      mod.HEAP32[pos / 4 + i] = a[i]\n      //    }\n    };\n    //////////////////////////////////\n    const _wrapGetStr = (func, returnAsStr = true) => {\n      return (x, ioMode = 0) => {\n        const maxBufSize = 3096;\n        const pos = _malloc(maxBufSize);\n        const n = func(pos, maxBufSize, x, ioMode);\n        if (n <= 0) {\n          throw new Error('err gen_str:' + x);\n        }\n        let s = null;\n        if (returnAsStr) {\n          s = ptrToAsciiStr(pos, n);\n        } else {\n          s = new Uint8Array(mod.HEAP8.subarray(pos, pos + n));\n        }\n        _free(pos);\n        return s;\n      };\n    };\n    const _wrapSerialize = func => {\n      return _wrapGetStr(func, false);\n    };\n    const _wrapDeserialize = func => {\n      return (x, buf) => {\n        const pos = _malloc(buf.length);\n        mod.HEAP8.set(buf, pos);\n        const r = func(x, pos, buf.length);\n        _free(pos);\n        if (r === 0 || r !== buf.length) throw new Error('err _wrapDeserialize', buf);\n      };\n    };\n    /*\n      argNum : n\n      func(x0, ..., x_(n-1), buf, ioMode)\n      => func(x0, ..., x_(n-1), pos, buf.length, ioMode)\n    */\n    const _wrapInput = (func, argNum, returnValue = false) => {\n      return function () {\n        const args = [...arguments];\n        const buf = args[argNum];\n        const typeStr = Object.prototype.toString.apply(buf);\n        if (['[object String]', '[object Uint8Array]', '[object Array]'].indexOf(typeStr) < 0) {\n          throw new Error(`err bad type:\"${typeStr}\". Use String or Uint8Array.`);\n        }\n        const ioMode = args[argNum + 1]; // may undefined\n        const pos = _malloc(buf.length);\n        if (typeStr === '[object String]') {\n          asciiStrToPtr(pos, buf);\n        } else {\n          mod.HEAP8.set(buf, pos);\n        }\n        const r = func(...args.slice(0, argNum), pos, buf.length, ioMode);\n        _free(pos);\n        if (returnValue) return r;\n        if (r) throw new Error('err _wrapInput ' + buf);\n      };\n    };\n    const callSetter = (func, a, p1, p2) => {\n      const pos = _malloc(a.length * 4);\n      func(pos, p1, p2); // p1, p2 may be undefined\n      copyToUint32Array(a, pos);\n      _free(pos);\n    };\n    const callGetter = (func, a, p1, p2) => {\n      const pos = _malloc(a.length * 4);\n      mod.HEAP32.set(a, pos / 4);\n      const s = func(pos, p1, p2);\n      _free(pos);\n      return s;\n    };\n    const callShare = (func, a, size, vec, id) => {\n      const pos = a._allocAndCopy();\n      const idPos = id._allocAndCopy();\n      const vecPos = _malloc(size * vec.length);\n      for (let i = 0; i < vec.length; i++) {\n        copyFromUint32Array(vecPos + size * i, vec[i].a_);\n      }\n      func(pos, vecPos, vec.length, idPos);\n      _free(vecPos);\n      _free(idPos);\n      a._saveAndFree(pos);\n    };\n    const callRecover = (func, a, size, vec, idVec) => {\n      const n = vec.length;\n      if (n != idVec.length) throw 'recover:bad length';\n      const secPos = a._alloc();\n      const vecPos = _malloc(size * n);\n      const idVecPos = _malloc(BLS_ID_SIZE * n);\n      for (let i = 0; i < n; i++) {\n        copyFromUint32Array(vecPos + size * i, vec[i].a_);\n        copyFromUint32Array(idVecPos + BLS_ID_SIZE * i, idVec[i].a_);\n      }\n      const r = func(secPos, vecPos, idVecPos, n);\n      _free(idVecPos);\n      _free(vecPos);\n      a._saveAndFree(secPos);\n      if (r) throw 'callRecover';\n    };\n\n    // change curveType\n    exports.blsInit = (curveType = exports.ethMode ? exports.BLS12_381 : exports.BN254) => {\n      const r = mod._blsInit(curveType, MCLBN_COMPILED_TIME_VAR);\n      if (r) throw 'blsInit err ' + r;\n    };\n    exports.mclBnFr_setLittleEndian = _wrapInput(mod._mclBnFr_setLittleEndian, 1);\n    exports.mclBnFr_setLittleEndianMod = _wrapInput(mod._mclBnFr_setLittleEndianMod, 1);\n    exports.mclBnFr_setBigEndianMod = _wrapInput(mod._mclBnFr_setBigEndianMod, 1);\n    exports.mclBnFr_setStr = _wrapInput(mod._mclBnFr_setStr, 1);\n    exports.mclBnFr_getStr = _wrapGetStr(mod._mclBnFr_getStr);\n    exports.mclBnFr_deserialize = _wrapDeserialize(mod._mclBnFr_deserialize);\n    exports.mclBnFr_serialize = _wrapSerialize(mod._mclBnFr_serialize);\n    exports.mclBnFr_setHashOf = _wrapInput(mod._mclBnFr_setHashOf, 1);\n    exports.mclBnG1_setStr = _wrapInput(mod._mclBnG1_setStr, 1);\n    exports.mclBnG1_getStr = _wrapGetStr(mod._mclBnG1_getStr);\n    exports.mclBnG2_setStr = _wrapInput(mod._mclBnG2_setStr, 1);\n    exports.mclBnG2_getStr = _wrapGetStr(mod._mclBnG2_getStr);\n    exports.getCurveOrder = _wrapGetStr(mod._blsGetCurveOrder);\n    exports.getFieldOrder = _wrapGetStr(mod._blsGetFieldOrder);\n    exports.setDstG1 = _wrapInput(mod._mclBnG1_setDst, 0);\n    exports.setDstG2 = _wrapInput(mod._mclBnG2_setDst, 0);\n    exports.blsIdSetDecStr = _wrapInput(mod._blsIdSetDecStr, 1);\n    exports.blsIdSetHexStr = _wrapInput(mod._blsIdSetHexStr, 1);\n    exports.blsIdGetDecStr = _wrapGetStr(mod._blsIdGetDecStr);\n    exports.blsIdGetHexStr = _wrapGetStr(mod._blsIdGetHexStr);\n    exports.blsIdSerialize = _wrapSerialize(mod._blsIdSerialize);\n    exports.blsSecretKeySerialize = _wrapSerialize(mod._blsSecretKeySerialize);\n    exports.blsPublicKeySerialize = _wrapSerialize(mod._blsPublicKeySerialize);\n    exports.blsSignatureSerialize = _wrapSerialize(mod._blsSignatureSerialize);\n    exports.blsIdDeserialize = _wrapDeserialize(mod._blsIdDeserialize);\n    exports.blsSecretKeyDeserialize = _wrapDeserialize(mod._blsSecretKeyDeserialize);\n    exports.blsPublicKeyDeserialize = _wrapDeserialize(mod._blsPublicKeyDeserialize);\n    exports.blsSignatureDeserialize = _wrapDeserialize(mod._blsSignatureDeserialize);\n    exports.blsPublicKeySerializeUncompressed = _wrapSerialize(mod._blsPublicKeySerializeUncompressed);\n    exports.blsSignatureSerializeUncompressed = _wrapSerialize(mod._blsSignatureSerializeUncompressed);\n    exports.blsPublicKeyDeserializeUncompressed = _wrapDeserialize(mod._blsPublicKeyDeserializeUncompressed);\n    exports.blsSignatureDeserializeUncompressed = _wrapDeserialize(mod._blsSignatureDeserializeUncompressed);\n    exports.blsSecretKeySetLittleEndian = _wrapInput(mod._blsSecretKeySetLittleEndian, 1);\n    exports.blsSecretKeySetLittleEndianMod = _wrapInput(mod._blsSecretKeySetLittleEndianMod, 1);\n    exports.blsHashToSecretKey = _wrapInput(mod._blsHashToSecretKey, 1);\n    exports.blsSign = _wrapInput(mod._blsSign, 2);\n    exports.blsVerify = _wrapInput(mod._blsVerify, 2, true);\n    class Common {\n      constructor(size) {\n        this.a_ = new Uint32Array(size / 4);\n      }\n      deserializeHexStr(s) {\n        this.deserialize(exports.fromHexStr(s));\n      }\n      serializeToHexStr() {\n        return exports.toHexStr(this.serialize());\n      }\n      dump(msg = '') {\n        console.log(msg + this.serializeToHexStr());\n      }\n      clear() {\n        this.a_.fill(0);\n      }\n      clone() {\n        const copy = new this.constructor();\n        copy.a_ = this.a_.slice(0);\n        return copy;\n      }\n      // alloc new array\n      _alloc() {\n        return _malloc(this.a_.length * 4);\n      }\n      // alloc and copy a_ to mod.HEAP32[pos / 4]\n      _allocAndCopy() {\n        const pos = this._alloc();\n        mod.HEAP32.set(this.a_, pos / 4);\n        return pos;\n      }\n      // save pos to a_\n      _save(pos) {\n        this.a_.set(mod.HEAP32.subarray(pos / 4, pos / 4 + this.a_.length));\n      }\n      // save and free\n      _saveAndFree(pos) {\n        this._save(pos);\n        _free(pos);\n      }\n      // set parameter (p1, p2 may be undefined)\n      _setter(func, p1, p2) {\n        const pos = this._alloc();\n        const r = func(pos, p1, p2);\n        this._saveAndFree(pos);\n        if (r) throw new Error('_setter err');\n      }\n      // getter (p1, p2 may be undefined)\n      _getter(func, p1, p2) {\n        const pos = this._allocAndCopy();\n        const s = func(pos, p1, p2);\n        _free(pos);\n        return s;\n      }\n      _isEqual(func, rhs) {\n        const xPos = this._allocAndCopy();\n        const yPos = rhs._allocAndCopy();\n        const r = func(xPos, yPos);\n        _free(yPos);\n        _free(xPos);\n        return r === 1;\n      }\n      // func(y, this) and return y\n      _op1(func) {\n        const y = new this.constructor();\n        const xPos = this._allocAndCopy();\n        const yPos = y._alloc();\n        func(yPos, xPos);\n        y._saveAndFree(yPos);\n        _free(xPos);\n        return y;\n      }\n      // func(z, this, y) and return z\n      _op2(func, y, Cstr = null) {\n        const z = Cstr ? new Cstr() : new this.constructor();\n        const xPos = this._allocAndCopy();\n        const yPos = y._allocAndCopy();\n        const zPos = z._alloc();\n        func(zPos, xPos, yPos);\n        z._saveAndFree(zPos);\n        _free(yPos);\n        _free(xPos);\n        return z;\n      }\n      // func(self, y)\n      _update(func, y) {\n        const xPos = this._allocAndCopy();\n        const yPos = y._allocAndCopy();\n        func(xPos, yPos);\n        _free(yPos);\n        this._saveAndFree(xPos);\n      }\n    }\n    exports.Fr = class extends Common {\n      constructor() {\n        super(MCLBN_FR_SIZE);\n      }\n      setInt(x) {\n        this._setter(mod._mclBnFr_setInt32, x);\n      }\n      deserialize(s) {\n        this._setter(exports.mclBnFr_deserialize, s);\n      }\n      serialize() {\n        return this._getter(exports.mclBnFr_serialize);\n      }\n      setStr(s, base = 0) {\n        this._setter(exports.mclBnFr_setStr, s, base);\n      }\n      getStr(base = 0) {\n        return this._getter(exports.mclBnFr_getStr, base);\n      }\n      isZero() {\n        return this._getter(mod._mclBnFr_isZero) === 1;\n      }\n      isOne() {\n        return this._getter(mod._mclBnFr_isOne) === 1;\n      }\n      isEqual(rhs) {\n        return this._isEqual(mod._mclBnFr_isEqual, rhs);\n      }\n      setLittleEndian(s) {\n        this._setter(exports.mclBnFr_setLittleEndian, s);\n      }\n      setLittleEndianMod(s) {\n        this._setter(exports.mclBnFr_setLittleEndianMod, s);\n      }\n      setBigEndianMod(s) {\n        this._setter(exports.mclBnFr_setBigEndianMod, s);\n      }\n      setByCSPRNG() {\n        const a = new Uint8Array(MCLBN_FR_SIZE);\n        exports.getRandomValues(a);\n        this.setLittleEndian(a);\n      }\n      setHashOf(s) {\n        this._setter(exports.mclBnFr_setHashOf, s);\n      }\n    };\n    exports.deserializeHexStrToFr = s => {\n      const r = new exports.Fr();\n      r.deserializeHexStr(s);\n      return r;\n    };\n    exports.Id = class extends Common {\n      constructor() {\n        super(BLS_ID_SIZE);\n      }\n      setInt(x) {\n        this._setter(mod._blsIdSetInt, x);\n      }\n      isEqual(rhs) {\n        return this._isEqual(mod._blsIdIsEqual, rhs);\n      }\n      deserialize(s) {\n        this._setter(exports.blsIdDeserialize, s);\n      }\n      serialize() {\n        return this._getter(exports.blsIdSerialize);\n      }\n      setStr(s, base = 10) {\n        switch (base) {\n          case 10:\n            this._setter(exports.blsIdSetDecStr, s);\n            return;\n          case 16:\n            this._setter(exports.blsIdSetHexStr, s);\n            return;\n          default:\n            throw 'BlsId.setStr:bad base:' + base;\n        }\n      }\n      getStr(base = 10) {\n        switch (base) {\n          case 10:\n            return this._getter(exports.blsIdGetDecStr);\n          case 16:\n            return this._getter(exports.blsIdGetHexStr);\n          default:\n            throw 'BlsId.getStr:bad base:' + base;\n        }\n      }\n      setLittleEndian(s) {\n        this._setter(exports.blsSecretKeySetLittleEndian, s);\n      }\n      setLittleEndianMod(s) {\n        this._setter(exports.blsSecretKeySetLittleEndianMod, s);\n      }\n      setByCSPRNG() {\n        const a = new Uint8Array(BLS_ID_SIZE);\n        exports.getRandomValues(a);\n        this.setLittleEndian(a);\n      }\n    };\n    exports.deserializeHexStrToId = s => {\n      const r = new exports.Id();\n      r.deserializeHexStr(s);\n      return r;\n    };\n    exports.SecretKey = class extends Common {\n      constructor() {\n        super(BLS_SECRETKEY_SIZE);\n      }\n      setInt(x) {\n        this._setter(mod._blsIdSetInt, x); // same as Id\n      }\n      isZero() {\n        return this._getter(mod._blsSecretKeyIsZero) === 1;\n      }\n      isEqual(rhs) {\n        return this._isEqual(mod._blsSecretKeyIsEqual, rhs);\n      }\n      deserialize(s) {\n        this._setter(exports.blsSecretKeyDeserialize, s);\n      }\n      serialize() {\n        return this._getter(exports.blsSecretKeySerialize);\n      }\n      add(rhs) {\n        this._update(mod._blsSecretKeyAdd, rhs);\n      }\n      share(msk, id) {\n        callShare(mod._blsSecretKeyShare, this, BLS_SECRETKEY_SIZE, msk, id);\n      }\n      recover(secVec, idVec) {\n        callRecover(mod._blsSecretKeyRecover, this, BLS_SECRETKEY_SIZE, secVec, idVec);\n      }\n      setHashOf(s) {\n        this._setter(exports.blsHashToSecretKey, s);\n      }\n      setLittleEndian(s) {\n        this._setter(exports.blsSecretKeySetLittleEndian, s);\n      }\n      setLittleEndianMod(s) {\n        this._setter(exports.blsSecretKeySetLittleEndianMod, s);\n      }\n      setByCSPRNG() {\n        const a = new Uint8Array(BLS_SECRETKEY_SIZE);\n        exports.getRandomValues(a);\n        this.setLittleEndian(a);\n      }\n      getPublicKey() {\n        const pub = new exports.PublicKey();\n        const secPos = this._allocAndCopy();\n        const pubPos = pub._alloc();\n        mod._blsGetPublicKey(pubPos, secPos);\n        pub._saveAndFree(pubPos);\n        _free(secPos);\n        return pub;\n      }\n      /*\n        input\n        m : message (string or Uint8Array)\n        return\n        BlsSignature\n      */\n      sign(m) {\n        const sig = new exports.Signature();\n        const secPos = this._allocAndCopy();\n        const sigPos = sig._alloc();\n        exports.blsSign(sigPos, secPos, m);\n        sig._saveAndFree(sigPos);\n        _free(secPos);\n        return sig;\n      }\n    };\n    exports.deserializeHexStrToSecretKey = s => {\n      const r = new exports.SecretKey();\n      r.deserializeHexStr(s);\n      return r;\n    };\n    exports.PublicKey = class extends Common {\n      constructor() {\n        super(BLS_PUBLICKEY_SIZE);\n      }\n      isZero() {\n        return this._getter(mod._blsPublicKeyIsZero) === 1;\n      }\n      isEqual(rhs) {\n        return this._isEqual(mod._blsPublicKeyIsEqual, rhs);\n      }\n      deserialize(s) {\n        this._setter(exports.blsPublicKeyDeserialize, s);\n      }\n      serialize() {\n        return this._getter(exports.blsPublicKeySerialize);\n      }\n      setStr(s, base = 0) {\n        const func = ETH_MODE ? exports.mclBnG1_setStr : exports.mclBnG2_setStr;\n        this._setter(func, s, base);\n      }\n      getStr(base = 0) {\n        const func = ETH_MODE ? exports.mclBnG1_getStr : exports.mclBnG2_getStr;\n        return this._getter(func, base);\n      }\n      deserializeUncompressed(s) {\n        this._setter(exports.blsPublicKeyDeserializeUncompressed, s);\n      }\n      serializeUncompressed() {\n        return this._getter(exports.blsPublicKeySerializeUncompressed);\n      }\n      add(rhs) {\n        this._update(mod._blsPublicKeyAdd, rhs);\n      }\n      mul(rhs) {\n        this._update(mod._blsPublicKeyMul, rhs);\n      }\n      share(mpk, id) {\n        callShare(mod._blsPublicKeyShare, this, BLS_PUBLICKEY_SIZE, mpk, id);\n      }\n      recover(secVec, idVec) {\n        callRecover(mod._blsPublicKeyRecover, this, BLS_PUBLICKEY_SIZE, secVec, idVec);\n      }\n      isValidOrder() {\n        return this._getter(mod._blsPublicKeyIsValidOrder);\n      }\n      verify(sig, m) {\n        const pubPos = this._allocAndCopy();\n        const sigPos = sig._allocAndCopy();\n        const r = exports.blsVerify(sigPos, pubPos, m);\n        _free(sigPos);\n        _free(pubPos);\n        return r != 0;\n      }\n    };\n    exports.deserializeHexStrToPublicKey = s => {\n      const r = new exports.PublicKey();\n      r.deserializeHexStr(s);\n      return r;\n    };\n    exports.setGeneratorOfPublicKey = pub => {\n      const pubPos = pub._allocAndCopy();\n      const r = mod._blsSetGeneratorOfPublicKey(pubPos);\n      _free(pubPos);\n      if (r !== 0) throw new Error('bad public key');\n    };\n    exports.getGeneratorOfPublicKey = () => {\n      const pub = new exports.PublicKey();\n      const pubPos = _malloc(BLS_SIGNATURE_SIZE);\n      mod._blsGetGeneratorOfPublicKey(pubPos);\n      pub._saveAndFree(pubPos);\n      return pub;\n    };\n    exports.getGeneratorofPublicKey = () => {\n      console.log('WARNING : getGeneratorofPublicKey is renamed to getGeneratorOfPublicKey');\n      return exports.getGeneratorOfPublicKey();\n    };\n    exports.Signature = class extends Common {\n      constructor() {\n        super(BLS_SIGNATURE_SIZE);\n      }\n      isZero() {\n        return this._getter(mod._blsSignatureIsZero) === 1;\n      }\n      isEqual(rhs) {\n        return this._isEqual(mod._blsSignatureIsEqual, rhs);\n      }\n      deserialize(s) {\n        this._setter(exports.blsSignatureDeserialize, s);\n      }\n      serialize() {\n        return this._getter(exports.blsSignatureSerialize);\n      }\n      deserializeUncompressed(s) {\n        this._setter(exports.blsSignatureDeserializeUncompressed, s);\n      }\n      setStr(s, base = 0) {\n        const func = ETH_MODE ? exports.mclBnG2_setStr : exports.mclBnG1_setStr;\n        this._setter(func, s, base);\n      }\n      getStr(base = 0) {\n        const func = ETH_MODE ? exports.mclBnG2_getStr : exports.mclBnG1_getStr;\n        return this._getter(func, base);\n      }\n      serializeUncompressed() {\n        return this._getter(exports.blsSignatureSerializeUncompressed);\n      }\n      add(rhs) {\n        this._update(mod._blsSignatureAdd, rhs);\n      }\n      recover(secVec, idVec) {\n        callRecover(mod._blsSignatureRecover, this, BLS_SIGNATURE_SIZE, secVec, idVec);\n      }\n      isValidOrder() {\n        return this._getter(mod._blsSignatureIsValidOrder);\n      }\n      // this = aggSig\n      aggregate(sigVec) {\n        const n = sigVec.length;\n        const aggSigPos = this._allocAndCopy();\n        const sigVecPos = _malloc(BLS_SIGNATURE_SIZE * n);\n        for (let i = 0; i < n; i++) {\n          mod.HEAP32.set(sigVec[i].a_, (sigVecPos + BLS_SIGNATURE_SIZE * i) / 4);\n        }\n        const r = mod._blsAggregateSignature(aggSigPos, sigVecPos, n);\n        _free(sigVecPos);\n        this._saveAndFree(aggSigPos);\n        return r == 1;\n      }\n      // this = aggSig\n      fastAggregateVerify(pubVec, msg) {\n        const n = pubVec.length;\n        const msgSize = msg.length;\n        const aggSigPos = this._allocAndCopy();\n        const pubVecPos = _malloc(BLS_PUBLICKEY_SIZE * n);\n        const msgPos = _malloc(msgSize);\n        for (let i = 0; i < n; i++) {\n          mod.HEAP32.set(pubVec[i].a_, (pubVecPos + BLS_PUBLICKEY_SIZE * i) / 4);\n        }\n        mod.HEAP8.set(msg, msgPos);\n        const r = mod._blsFastAggregateVerify(aggSigPos, pubVecPos, n, msgPos, msgSize);\n        _free(msgPos);\n        _free(pubVecPos);\n        _free(aggSigPos);\n        return r == 1;\n      }\n      // this = aggSig\n      // msgVec = (32 * pubVec.length)-size Uint8Array\n      aggregateVerifyNoCheck(pubVec, msgVec) {\n        const n = pubVec.length;\n        const msgSize = 32;\n        if (n == 0 || msgVec.length != msgSize * n) {\n          return false;\n        }\n        const aggSigPos = this._allocAndCopy();\n        const pubVecPos = _malloc(BLS_PUBLICKEY_SIZE * n);\n        const msgPos = _malloc(msgVec.length);\n        for (let i = 0; i < n; i++) {\n          mod.HEAP32.set(pubVec[i].a_, (pubVecPos + BLS_PUBLICKEY_SIZE * i) / 4);\n        }\n        mod.HEAP8.set(msgVec, msgPos);\n        const r = mod._blsAggregateVerifyNoCheck(aggSigPos, pubVecPos, msgPos, msgSize, n);\n        _free(msgPos);\n        _free(pubVecPos);\n        _free(aggSigPos);\n        return r == 1;\n      }\n    };\n    exports.deserializeHexStrToSignature = s => {\n      const r = new exports.Signature();\n      r.deserializeHexStr(s);\n      return r;\n    };\n    // 1 (draft-05) 2 (draft-06) 3 (draft-07)\n    exports.setETHmode = mode => {\n      if (mod._blsSetETHmode(mode) != 0) throw new Error(`bad setETHmode ${mode}`);\n    };\n    exports.setETHserialiation = enable => {\n      mod._mclBn_setETHserialization(enable ? 1 : 0);\n    };\n    exports.setMapToMode = mode => {\n      if (mod._mclBn_setMapToMode(mode) != 0) throw new Error(`bad setMapToMode ${mode}`);\n    };\n    // make setter check the correctness of the order if doVerify\n    exports.verifySignatureOrder = doVerify => {\n      mod._blsSignatureVerifyOrder(doVerify);\n    };\n    // make setter check the correctness of the order if doVerify\n    exports.verifyPublicKeyOrder = doVerify => {\n      mod._blsPublicKeyVerifyOrder(doVerify);\n    };\n    exports.areAllMsgDifferent = (msgs, msgSize) => {\n      const n = msgs.length / msgSize;\n      if (msgs.length != n * msgSize) return false;\n      const h = {};\n      for (let i = 0; i < n; i++) {\n        const m = msgs.subarray(i * msgSize, (i + 1) * msgSize);\n        if (m in h) return false;\n        h[m] = true;\n      }\n      return true;\n    };\n    /*\n      return true if all pub[i].verify(sigs[i], msgs[i])\n      msgs is a concatenation of arrays of 32-byte Uint8Array\n    */\n    exports.multiVerify = (pubs, sigs, msgs) => {\n      const MSG_SIZE = 32;\n      const RAND_SIZE = 8; // 64-bit rand\n      const threadNum = 0; // not used\n      const n = sigs.length;\n      if (pubs.length != n || msgs.length != n) return false;\n      for (let i = 0; i < n; i++) {\n        if (msgs[i].length != MSG_SIZE) return false;\n      }\n      const sigPos = _malloc(BLS_SIGNATURE_SIZE * n);\n      const pubPos = _malloc(BLS_PUBLICKEY_SIZE * n);\n      const msgPos = _malloc(MSG_SIZE * n);\n      const randPos = _malloc(RAND_SIZE * n);\n\n      // getRandomValues accepts only Uint8Array\n      const rai = mod.HEAP8.subarray(randPos, randPos + RAND_SIZE * n);\n      const rau = new Uint8Array(rai.buffer, randPos, rai.length);\n      exports.getRandomValues(rau);\n      for (let i = 0; i < n; i++) {\n        mod.HEAP32.set(sigs[i].a_, (sigPos + BLS_SIGNATURE_SIZE * i) / 4);\n        mod.HEAP32.set(pubs[i].a_, (pubPos + BLS_PUBLICKEY_SIZE * i) / 4);\n        mod.HEAP8.set(msgs[i], msgPos + MSG_SIZE * i);\n      }\n      const r = mod._blsMultiVerify(sigPos, pubPos, msgPos, MSG_SIZE, randPos, RAND_SIZE, n, threadNum);\n      _free(randPos);\n      _free(msgPos);\n      _free(pubPos);\n      _free(sigPos);\n      return r == 1;\n    };\n    exports.blsInit(curveType);\n    if (exports.ethMode) {\n      exports.setETHmode(exports.ETH_MODE_DRAFT_07);\n    }\n    exports.neg = x => {\n      if (x instanceof exports.Fr) {\n        return x._op1(mod._mclBnFr_neg);\n      }\n      throw new Error('neg:bad type');\n    };\n    exports.sqr = x => {\n      if (x instanceof exports.Fr) {\n        return x._op1(mod._mclBnFr_sqr);\n      }\n      throw new Error('sqr:bad type');\n    };\n    exports.inv = x => {\n      if (x instanceof exports.Fr) {\n        return x._op1(mod._mclBnFr_inv);\n      }\n      throw new Error('inv:bad type');\n    };\n    exports.add = (x, y) => {\n      if (x.constructor !== y.constructor) throw new Error('add:mismatch type');\n      if (x instanceof exports.Fr) {\n        return x._op2(mod._mclBnFr_add, y);\n      }\n      throw new Error('add:bad type');\n    };\n    exports.sub = (x, y) => {\n      if (x.constructor !== y.constructor) throw new Error('sub:mismatch type');\n      if (x instanceof exports.Fr) {\n        return x._op2(mod._mclBnFr_sub, y);\n      }\n      throw new Error('sub:bad type');\n    };\n    /*\n      Fr * Fr\n    */\n    exports.mul = (x, y) => {\n      if (x instanceof exports.Fr && y instanceof exports.Fr) {\n        return x._op2(mod._mclBnFr_mul, y);\n      }\n      throw new Error('mul:mismatch type');\n    };\n    exports.div = (x, y) => {\n      if (x.constructor !== y.constructor) throw new Error('div:mismatch type');\n      if (x instanceof exports.Fr) {\n        return x._op2(mod._mclBnFr_div, y);\n      }\n      throw new Error('div:bad type');\n    };\n    exports.hashToFr = s => {\n      const x = new exports.Fr();\n      x.setHashOf(s);\n      return x;\n    };\n  } // blsSetup()\n\n  const _cryptoGetRandomValues = function (p, n) {\n    const a = new Uint8Array(n);\n    exports.getRandomValues(a);\n    for (let i = 0; i < n; i++) {\n      exports.mod.HEAP8[p + i] = a[i];\n    }\n  };\n  // f(a:array) fills a with random value\n  exports.setRandFunc = f => {\n    exports.getRandomValues = f;\n  };\n  exports.init = async (curveType = exports.ethMode ? exports.BLS12_381 : exports.BN254) => {\n    exports.curveType = curveType;\n    exports.getRandomValues = crypto.getRandomValues.bind(crypto);\n    exports.mod = await createModule({\n      cryptoGetRandomValues: _cryptoGetRandomValues\n    });\n    blsSetup(exports, curveType);\n  };\n  return exports;\n};\nmodule.exports = _blsSetupFactory;","map":{"version":3,"names":["ETH_MODE","_blsSetupFactory","createModule","exports","BN254","BN381_1","BN_SNARK1","BLS12_381","ethMode","ETH_MODE_DRAFT_05","ETH_MODE_DRAFT_06","ETH_MODE_DRAFT_07","MAP_TO_MODE_ORIGINAL","MAP_TO_MODE_HASH_TO_CURVE","blsSetup","curveType","mod","MCLBN_FP_UNIT_SIZE","MCLBN_FP_SIZE","MCLBN_FR_UNIT_SIZE","MCLBN_FR_SIZE","BLS_COMPILER_TIME_VAR_ADJ","MCLBN_COMPILED_TIME_VAR","BLS_ID_SIZE","BLS_SECRETKEY_SIZE","BLS_PUBLICKEY_SIZE","BLS_SIGNATURE_SIZE","_malloc","size","_blsMalloc","_free","pos","_blsFree","ptrToAsciiStr","n","s","i","String","fromCharCode","HEAP8","asciiStrToPtr","length","charCodeAt","toHex","a","start","toString","slice","toHexStr","fromHexStr","Error","Uint8Array","parseInt","copyToUint32Array","set","HEAP32","subarray","copyFromUint32Array","_wrapGetStr","func","returnAsStr","x","ioMode","maxBufSize","_wrapSerialize","_wrapDeserialize","buf","r","_wrapInput","argNum","returnValue","args","arguments","typeStr","Object","prototype","apply","indexOf","callSetter","p1","p2","callGetter","callShare","vec","id","_allocAndCopy","idPos","vecPos","a_","_saveAndFree","callRecover","idVec","secPos","_alloc","idVecPos","blsInit","_blsInit","mclBnFr_setLittleEndian","_mclBnFr_setLittleEndian","mclBnFr_setLittleEndianMod","_mclBnFr_setLittleEndianMod","mclBnFr_setBigEndianMod","_mclBnFr_setBigEndianMod","mclBnFr_setStr","_mclBnFr_setStr","mclBnFr_getStr","_mclBnFr_getStr","mclBnFr_deserialize","_mclBnFr_deserialize","mclBnFr_serialize","_mclBnFr_serialize","mclBnFr_setHashOf","_mclBnFr_setHashOf","mclBnG1_setStr","_mclBnG1_setStr","mclBnG1_getStr","_mclBnG1_getStr","mclBnG2_setStr","_mclBnG2_setStr","mclBnG2_getStr","_mclBnG2_getStr","getCurveOrder","_blsGetCurveOrder","getFieldOrder","_blsGetFieldOrder","setDstG1","_mclBnG1_setDst","setDstG2","_mclBnG2_setDst","blsIdSetDecStr","_blsIdSetDecStr","blsIdSetHexStr","_blsIdSetHexStr","blsIdGetDecStr","_blsIdGetDecStr","blsIdGetHexStr","_blsIdGetHexStr","blsIdSerialize","_blsIdSerialize","blsSecretKeySerialize","_blsSecretKeySerialize","blsPublicKeySerialize","_blsPublicKeySerialize","blsSignatureSerialize","_blsSignatureSerialize","blsIdDeserialize","_blsIdDeserialize","blsSecretKeyDeserialize","_blsSecretKeyDeserialize","blsPublicKeyDeserialize","_blsPublicKeyDeserialize","blsSignatureDeserialize","_blsSignatureDeserialize","blsPublicKeySerializeUncompressed","_blsPublicKeySerializeUncompressed","blsSignatureSerializeUncompressed","_blsSignatureSerializeUncompressed","blsPublicKeyDeserializeUncompressed","_blsPublicKeyDeserializeUncompressed","blsSignatureDeserializeUncompressed","_blsSignatureDeserializeUncompressed","blsSecretKeySetLittleEndian","_blsSecretKeySetLittleEndian","blsSecretKeySetLittleEndianMod","_blsSecretKeySetLittleEndianMod","blsHashToSecretKey","_blsHashToSecretKey","blsSign","_blsSign","blsVerify","_blsVerify","Common","constructor","Uint32Array","deserializeHexStr","deserialize","serializeToHexStr","serialize","dump","msg","console","log","clear","fill","clone","copy","_save","_setter","_getter","_isEqual","rhs","xPos","yPos","_op1","y","_op2","Cstr","z","zPos","_update","Fr","setInt","_mclBnFr_setInt32","setStr","base","getStr","isZero","_mclBnFr_isZero","isOne","_mclBnFr_isOne","isEqual","_mclBnFr_isEqual","setLittleEndian","setLittleEndianMod","setBigEndianMod","setByCSPRNG","getRandomValues","setHashOf","deserializeHexStrToFr","Id","_blsIdSetInt","_blsIdIsEqual","deserializeHexStrToId","SecretKey","_blsSecretKeyIsZero","_blsSecretKeyIsEqual","add","_blsSecretKeyAdd","share","msk","_blsSecretKeyShare","recover","secVec","_blsSecretKeyRecover","getPublicKey","pub","PublicKey","pubPos","_blsGetPublicKey","sign","m","sig","Signature","sigPos","deserializeHexStrToSecretKey","_blsPublicKeyIsZero","_blsPublicKeyIsEqual","deserializeUncompressed","serializeUncompressed","_blsPublicKeyAdd","mul","_blsPublicKeyMul","mpk","_blsPublicKeyShare","_blsPublicKeyRecover","isValidOrder","_blsPublicKeyIsValidOrder","verify","deserializeHexStrToPublicKey","setGeneratorOfPublicKey","_blsSetGeneratorOfPublicKey","getGeneratorOfPublicKey","_blsGetGeneratorOfPublicKey","getGeneratorofPublicKey","_blsSignatureIsZero","_blsSignatureIsEqual","_blsSignatureAdd","_blsSignatureRecover","_blsSignatureIsValidOrder","aggregate","sigVec","aggSigPos","sigVecPos","_blsAggregateSignature","fastAggregateVerify","pubVec","msgSize","pubVecPos","msgPos","_blsFastAggregateVerify","aggregateVerifyNoCheck","msgVec","_blsAggregateVerifyNoCheck","deserializeHexStrToSignature","setETHmode","mode","_blsSetETHmode","setETHserialiation","enable","_mclBn_setETHserialization","setMapToMode","_mclBn_setMapToMode","verifySignatureOrder","doVerify","_blsSignatureVerifyOrder","verifyPublicKeyOrder","_blsPublicKeyVerifyOrder","areAllMsgDifferent","msgs","h","multiVerify","pubs","sigs","MSG_SIZE","RAND_SIZE","threadNum","randPos","rai","rau","buffer","_blsMultiVerify","neg","_mclBnFr_neg","sqr","_mclBnFr_sqr","inv","_mclBnFr_inv","_mclBnFr_add","sub","_mclBnFr_sub","_mclBnFr_mul","div","_mclBnFr_div","hashToFr","_cryptoGetRandomValues","p","setRandFunc","f","init","crypto","bind","cryptoGetRandomValues","module"],"sources":["D:/demo/node_modules/bls-eth-wasm/src/bls.js"],"sourcesContent":["/**\n * @param createModule Async factory that returns an emcc initialized Module\n * In node, `const createModule = require(`./bls_c.js`)`\n */\nconst ETH_MODE = true\n\nconst _blsSetupFactory = (createModule) => {\n  const exports = {}\n  /* eslint-disable */\n  exports.BN254 = 0\n  exports.BN381_1 = 1\n  exports.BN_SNARK1 = 4\n  exports.BLS12_381 = 5\n  exports.ethMode = ETH_MODE\n  exports.ETH_MODE_DRAFT_05 = 1\n  exports.ETH_MODE_DRAFT_06 = 2\n  exports.ETH_MODE_DRAFT_07 = 3\n  exports.MAP_TO_MODE_ORIGINAL = 0\n  exports.MAP_TO_MODE_HASH_TO_CURVE = 5 // IRTF\n\n  function blsSetup(exports, curveType) {\n    const mod = exports.mod\n    const MCLBN_FP_UNIT_SIZE = 6\n    const MCLBN_FP_SIZE = MCLBN_FP_UNIT_SIZE * 8\n    const MCLBN_FR_UNIT_SIZE = 4\n    const MCLBN_FR_SIZE = MCLBN_FR_UNIT_SIZE * 8\n    const BLS_COMPILER_TIME_VAR_ADJ = exports.ethMode ? 200 : 0\n    const MCLBN_COMPILED_TIME_VAR = (MCLBN_FR_UNIT_SIZE * 10 + MCLBN_FP_UNIT_SIZE) + BLS_COMPILER_TIME_VAR_ADJ\n    const BLS_ID_SIZE = MCLBN_FR_SIZE\n    const BLS_SECRETKEY_SIZE = MCLBN_FR_SIZE\n    const BLS_PUBLICKEY_SIZE = MCLBN_FP_SIZE * 3 * (exports.ethMode ? 1 : 2)\n    const BLS_SIGNATURE_SIZE = MCLBN_FP_SIZE * 3 * (exports.ethMode ? 2 : 1)\n\n    const _malloc = size => {\n      return mod._blsMalloc(size)\n    }\n    const _free = pos => {\n      mod._blsFree(pos)\n    }\n    const ptrToAsciiStr = (pos, n) => {\n      let s = ''\n      for (let i = 0; i < n; i++) {\n        s += String.fromCharCode(mod.HEAP8[pos + i])\n      }\n      return s\n    }\n    const asciiStrToPtr = (pos, s) => {\n      for (let i = 0; i < s.length; i++) {\n        mod.HEAP8[pos + i] = s.charCodeAt(i)\n      }\n    }\n    exports.toHex = (a, start, n) => {\n      let s = ''\n      for (let i = 0; i < n; i++) {\n        s += ('0' + a[start + i].toString(16)).slice(-2)\n      }\n      return s\n    }\n    // Uint8Array to hex string\n    exports.toHexStr = a => {\n      return exports.toHex(a, 0, a.length)\n    }\n    // hex string to Uint8Array\n    exports.fromHexStr = s => {\n      if (s.length & 1) throw new Error('fromHexStr:length must be even ' + s.length)\n      const n = s.length / 2\n      const a = new Uint8Array(n)\n      for (let i = 0; i < n; i++) {\n        a[i] = parseInt(s.slice(i * 2, i * 2 + 2), 16)\n      }\n      return a\n    }\n///////////////////////////\n    const copyToUint32Array = (a, pos) => {\n      a.set(mod.HEAP32.subarray(pos / 4, pos / 4 + a.length))\n//    for (let i = 0; i < a.length; i++) {\n//      a[i] = mod.HEAP32[pos / 4 + i]\n//    }\n    }\n    const copyFromUint32Array = (pos, a) => {\n      mod.HEAP32.set(a, pos / 4)\n//    for (let i = 0; i < a.length; i++) {\n//      mod.HEAP32[pos / 4 + i] = a[i]\n//    }\n    }\n//////////////////////////////////\n    const _wrapGetStr = (func, returnAsStr = true) => {\n      return (x, ioMode = 0) => {\n        const maxBufSize = 3096\n        const pos = _malloc(maxBufSize)\n        const n = func(pos, maxBufSize, x, ioMode)\n        if (n <= 0) {\n          throw new Error('err gen_str:' + x)\n        }\n        let s = null\n        if (returnAsStr) {\n          s = ptrToAsciiStr(pos, n)\n        } else {\n          s = new Uint8Array(mod.HEAP8.subarray(pos, pos + n))\n        }\n        _free(pos)\n        return s\n      }\n    }\n    const _wrapSerialize = func => {\n      return _wrapGetStr(func, false)\n    }\n    const _wrapDeserialize = func => {\n      return (x, buf) => {\n        const pos = _malloc(buf.length)\n        mod.HEAP8.set(buf, pos)\n        const r = func(x, pos, buf.length)\n        _free(pos)\n        if (r === 0 || r !== buf.length) throw new Error('err _wrapDeserialize', buf)\n      }\n    }\n    /*\n      argNum : n\n      func(x0, ..., x_(n-1), buf, ioMode)\n      => func(x0, ..., x_(n-1), pos, buf.length, ioMode)\n    */\n    const _wrapInput = (func, argNum, returnValue = false) => {\n      return function () {\n        const args = [...arguments]\n        const buf = args[argNum]\n        const typeStr = Object.prototype.toString.apply(buf)\n        if (['[object String]', '[object Uint8Array]', '[object Array]'].indexOf(typeStr) < 0) {\n          throw new Error(`err bad type:\"${typeStr}\". Use String or Uint8Array.`)\n        }\n        const ioMode = args[argNum + 1] // may undefined\n        const pos = _malloc(buf.length)\n        if (typeStr === '[object String]') {\n          asciiStrToPtr(pos, buf)\n        } else {\n          mod.HEAP8.set(buf, pos)\n        }\n        const r = func(...args.slice(0, argNum), pos, buf.length, ioMode)\n        _free(pos)\n        if (returnValue) return r\n        if (r) throw new Error('err _wrapInput ' + buf)\n      }\n    }\n    const callSetter = (func, a, p1, p2) => {\n      const pos = _malloc(a.length * 4)\n      func(pos, p1, p2) // p1, p2 may be undefined\n      copyToUint32Array(a, pos)\n      _free(pos)\n    }\n    const callGetter = (func, a, p1, p2) => {\n      const pos = _malloc(a.length * 4)\n      mod.HEAP32.set(a, pos / 4)\n      const s = func(pos, p1, p2)\n      _free(pos)\n      return s\n    }\n    const callShare = (func, a, size, vec, id) => {\n      const pos = a._allocAndCopy()\n      const idPos = id._allocAndCopy()\n      const vecPos = _malloc(size * vec.length)\n      for (let i = 0; i < vec.length; i++) {\n        copyFromUint32Array(vecPos + size * i, vec[i].a_)\n      }\n      func(pos, vecPos, vec.length, idPos)\n      _free(vecPos)\n      _free(idPos)\n      a._saveAndFree(pos)\n    }\n    const callRecover = (func, a, size, vec, idVec) => {\n      const n = vec.length\n      if (n != idVec.length) throw ('recover:bad length')\n      const secPos = a._alloc()\n      const vecPos = _malloc(size * n)\n      const idVecPos = _malloc(BLS_ID_SIZE * n)\n      for (let i = 0; i < n; i++) {\n        copyFromUint32Array(vecPos + size * i, vec[i].a_)\n        copyFromUint32Array(idVecPos + BLS_ID_SIZE * i, idVec[i].a_)\n      }\n      const r = func(secPos, vecPos, idVecPos, n)\n      _free(idVecPos)\n      _free(vecPos)\n      a._saveAndFree(secPos)\n      if (r) throw ('callRecover')\n    }\n\n    // change curveType\n    exports.blsInit = (curveType = exports.ethMode ? exports.BLS12_381 : exports.BN254) => {\n      const r = mod._blsInit(curveType, MCLBN_COMPILED_TIME_VAR)\n      if (r) throw ('blsInit err ' + r)\n    }\n    exports.mclBnFr_setLittleEndian = _wrapInput(mod._mclBnFr_setLittleEndian, 1)\n    exports.mclBnFr_setLittleEndianMod = _wrapInput(mod._mclBnFr_setLittleEndianMod, 1)\n    exports.mclBnFr_setBigEndianMod = _wrapInput(mod._mclBnFr_setBigEndianMod, 1)\n    exports.mclBnFr_setStr = _wrapInput(mod._mclBnFr_setStr, 1)\n    exports.mclBnFr_getStr = _wrapGetStr(mod._mclBnFr_getStr)\n    exports.mclBnFr_deserialize = _wrapDeserialize(mod._mclBnFr_deserialize)\n    exports.mclBnFr_serialize = _wrapSerialize(mod._mclBnFr_serialize)\n    exports.mclBnFr_setHashOf = _wrapInput(mod._mclBnFr_setHashOf, 1)\n\n    exports.mclBnG1_setStr = _wrapInput(mod._mclBnG1_setStr, 1)\n    exports.mclBnG1_getStr = _wrapGetStr(mod._mclBnG1_getStr)\n    exports.mclBnG2_setStr = _wrapInput(mod._mclBnG2_setStr, 1)\n    exports.mclBnG2_getStr = _wrapGetStr(mod._mclBnG2_getStr)\n\n    exports.getCurveOrder = _wrapGetStr(mod._blsGetCurveOrder)\n    exports.getFieldOrder = _wrapGetStr(mod._blsGetFieldOrder)\n    exports.setDstG1 = _wrapInput(mod._mclBnG1_setDst, 0)\n    exports.setDstG2 = _wrapInput(mod._mclBnG2_setDst, 0)\n\n    exports.blsIdSetDecStr = _wrapInput(mod._blsIdSetDecStr, 1)\n    exports.blsIdSetHexStr = _wrapInput(mod._blsIdSetHexStr, 1)\n    exports.blsIdGetDecStr = _wrapGetStr(mod._blsIdGetDecStr)\n    exports.blsIdGetHexStr = _wrapGetStr(mod._blsIdGetHexStr)\n\n    exports.blsIdSerialize = _wrapSerialize(mod._blsIdSerialize)\n    exports.blsSecretKeySerialize = _wrapSerialize(mod._blsSecretKeySerialize)\n    exports.blsPublicKeySerialize = _wrapSerialize(mod._blsPublicKeySerialize)\n    exports.blsSignatureSerialize = _wrapSerialize(mod._blsSignatureSerialize)\n\n    exports.blsIdDeserialize = _wrapDeserialize(mod._blsIdDeserialize)\n    exports.blsSecretKeyDeserialize = _wrapDeserialize(mod._blsSecretKeyDeserialize)\n    exports.blsPublicKeyDeserialize = _wrapDeserialize(mod._blsPublicKeyDeserialize)\n    exports.blsSignatureDeserialize = _wrapDeserialize(mod._blsSignatureDeserialize)\n\n    exports.blsPublicKeySerializeUncompressed = _wrapSerialize(mod._blsPublicKeySerializeUncompressed)\n    exports.blsSignatureSerializeUncompressed = _wrapSerialize(mod._blsSignatureSerializeUncompressed)\n    exports.blsPublicKeyDeserializeUncompressed = _wrapDeserialize(mod._blsPublicKeyDeserializeUncompressed)\n    exports.blsSignatureDeserializeUncompressed = _wrapDeserialize(mod._blsSignatureDeserializeUncompressed)\n\n    exports.blsSecretKeySetLittleEndian = _wrapInput(mod._blsSecretKeySetLittleEndian, 1)\n    exports.blsSecretKeySetLittleEndianMod = _wrapInput(mod._blsSecretKeySetLittleEndianMod, 1)\n    exports.blsHashToSecretKey = _wrapInput(mod._blsHashToSecretKey, 1)\n    exports.blsSign = _wrapInput(mod._blsSign, 2)\n    exports.blsVerify = _wrapInput(mod._blsVerify, 2, true)\n\n    class Common {\n      constructor (size) {\n        this.a_ = new Uint32Array(size / 4)\n      }\n      deserializeHexStr (s) {\n        this.deserialize(exports.fromHexStr(s))\n      }\n      serializeToHexStr () {\n        return exports.toHexStr(this.serialize())\n      }\n      dump (msg = '') {\n        console.log(msg + this.serializeToHexStr())\n      }\n      clear () {\n        this.a_.fill(0)\n      }\n      clone () {\n        const copy = new this.constructor()\n        copy.a_ = this.a_.slice(0)\n        return copy\n      }\n      // alloc new array\n      _alloc () {\n        return _malloc(this.a_.length * 4)\n      }\n      // alloc and copy a_ to mod.HEAP32[pos / 4]\n      _allocAndCopy () {\n        const pos = this._alloc()\n        mod.HEAP32.set(this.a_, pos / 4)\n        return pos\n      }\n      // save pos to a_\n      _save (pos) {\n        this.a_.set(mod.HEAP32.subarray(pos / 4, pos / 4 + this.a_.length))\n      }\n      // save and free\n      _saveAndFree(pos) {\n        this._save(pos)\n        _free(pos)\n      }\n      // set parameter (p1, p2 may be undefined)\n      _setter (func, p1, p2) {\n        const pos = this._alloc()\n        const r = func(pos, p1, p2)\n        this._saveAndFree(pos)\n        if (r) throw new Error('_setter err')\n      }\n      // getter (p1, p2 may be undefined)\n      _getter (func, p1, p2) {\n        const pos = this._allocAndCopy()\n        const s = func(pos, p1, p2)\n        _free(pos)\n        return s\n      }\n      _isEqual (func, rhs) {\n        const xPos = this._allocAndCopy()\n        const yPos = rhs._allocAndCopy()\n        const r = func(xPos, yPos)\n        _free(yPos)\n        _free(xPos)\n        return r === 1\n      }\n      // func(y, this) and return y\n      _op1 (func) {\n        const y = new this.constructor()\n        const xPos = this._allocAndCopy()\n        const yPos = y._alloc()\n        func(yPos, xPos)\n        y._saveAndFree(yPos)\n        _free(xPos)\n        return y\n      }\n      // func(z, this, y) and return z\n      _op2 (func, y, Cstr = null) {\n        const z = Cstr ? new Cstr() : new this.constructor()\n        const xPos = this._allocAndCopy()\n        const yPos = y._allocAndCopy()\n        const zPos = z._alloc()\n        func(zPos, xPos, yPos)\n        z._saveAndFree(zPos)\n        _free(yPos)\n        _free(xPos)\n        return z\n      }\n      // func(self, y)\n      _update (func, y) {\n        const xPos = this._allocAndCopy()\n        const yPos = y._allocAndCopy()\n        func(xPos, yPos)\n        _free(yPos)\n        this._saveAndFree(xPos)\n      }\n    }\n\n    exports.Fr = class extends Common {\n      constructor () {\n        super(MCLBN_FR_SIZE)\n      }\n      setInt (x) {\n        this._setter(mod._mclBnFr_setInt32, x)\n      }\n      deserialize (s) {\n        this._setter(exports.mclBnFr_deserialize, s)\n      }\n      serialize () {\n        return this._getter(exports.mclBnFr_serialize)\n      }\n      setStr (s, base = 0) {\n        this._setter(exports.mclBnFr_setStr, s, base)\n      }\n      getStr (base = 0) {\n        return this._getter(exports.mclBnFr_getStr, base)\n      }\n      isZero () {\n        return this._getter(mod._mclBnFr_isZero) === 1\n      }\n      isOne () {\n        return this._getter(mod._mclBnFr_isOne) === 1\n      }\n      isEqual (rhs) {\n        return this._isEqual(mod._mclBnFr_isEqual, rhs)\n      }\n      setLittleEndian (s) {\n        this._setter(exports.mclBnFr_setLittleEndian, s)\n      }\n      setLittleEndianMod (s) {\n        this._setter(exports.mclBnFr_setLittleEndianMod, s)\n      }\n      setBigEndianMod (s) {\n        this._setter(exports.mclBnFr_setBigEndianMod, s)\n      }\n      setByCSPRNG () {\n        const a = new Uint8Array(MCLBN_FR_SIZE)\n        exports.getRandomValues(a)\n        this.setLittleEndian(a)\n      }\n      setHashOf (s) {\n        this._setter(exports.mclBnFr_setHashOf, s)\n      }\n    }\n    exports.deserializeHexStrToFr = s => {\n      const r = new exports.Fr()\n      r.deserializeHexStr(s)\n      return r\n    }\n\n    exports.Id = class extends Common {\n      constructor () {\n        super(BLS_ID_SIZE)\n      }\n      setInt (x) {\n        this._setter(mod._blsIdSetInt, x)\n      }\n      isEqual (rhs) {\n        return this._isEqual(mod._blsIdIsEqual, rhs)\n      }\n      deserialize (s) {\n        this._setter(exports.blsIdDeserialize, s)\n      }\n      serialize () {\n        return this._getter(exports.blsIdSerialize)\n      }\n      setStr (s, base = 10) {\n        switch (base) {\n          case 10:\n            this._setter(exports.blsIdSetDecStr, s)\n            return\n          case 16:\n            this._setter(exports.blsIdSetHexStr, s)\n            return\n          default:\n            throw ('BlsId.setStr:bad base:' + base)\n        }\n      }\n      getStr (base = 10) {\n        switch (base) {\n          case 10:\n            return this._getter(exports.blsIdGetDecStr)\n          case 16:\n            return this._getter(exports.blsIdGetHexStr)\n          default:\n            throw ('BlsId.getStr:bad base:' + base)\n        }\n      }\n      setLittleEndian (s) {\n        this._setter(exports.blsSecretKeySetLittleEndian, s)\n      }\n      setLittleEndianMod (s) {\n        this._setter(exports.blsSecretKeySetLittleEndianMod, s)\n      }\n      setByCSPRNG () {\n        const a = new Uint8Array(BLS_ID_SIZE)\n        exports.getRandomValues(a)\n        this.setLittleEndian(a)\n      }\n    }\n    exports.deserializeHexStrToId = s => {\n      const r = new exports.Id()\n      r.deserializeHexStr(s)\n      return r\n    }\n\n    exports.SecretKey = class extends Common {\n      constructor () {\n        super(BLS_SECRETKEY_SIZE)\n      }\n      setInt (x) {\n        this._setter(mod._blsIdSetInt, x) // same as Id\n      }\n      isZero () {\n        return this._getter(mod._blsSecretKeyIsZero) === 1\n      }\n      isEqual (rhs) {\n        return this._isEqual(mod._blsSecretKeyIsEqual, rhs)\n      }\n      deserialize (s) {\n        this._setter(exports.blsSecretKeyDeserialize, s)\n      }\n      serialize () {\n        return this._getter(exports.blsSecretKeySerialize)\n      }\n      add (rhs) {\n        this._update(mod._blsSecretKeyAdd, rhs)\n      }\n      share (msk, id) {\n        callShare(mod._blsSecretKeyShare, this, BLS_SECRETKEY_SIZE, msk, id)\n      }\n      recover (secVec, idVec) {\n        callRecover(mod._blsSecretKeyRecover, this, BLS_SECRETKEY_SIZE, secVec, idVec)\n      }\n      setHashOf (s) {\n        this._setter(exports.blsHashToSecretKey, s)\n      }\n      setLittleEndian (s) {\n        this._setter(exports.blsSecretKeySetLittleEndian, s)\n      }\n      setLittleEndianMod (s) {\n        this._setter(exports.blsSecretKeySetLittleEndianMod, s)\n      }\n      setByCSPRNG () {\n        const a = new Uint8Array(BLS_SECRETKEY_SIZE)\n        exports.getRandomValues(a)\n        this.setLittleEndian(a)\n      }\n      getPublicKey () {\n        const pub = new exports.PublicKey()\n        const secPos = this._allocAndCopy()\n        const pubPos = pub._alloc()\n        mod._blsGetPublicKey(pubPos, secPos)\n        pub._saveAndFree(pubPos)\n        _free(secPos)\n        return pub\n      }\n      /*\n        input\n        m : message (string or Uint8Array)\n        return\n        BlsSignature\n      */\n      sign (m) {\n        const sig = new exports.Signature()\n        const secPos = this._allocAndCopy()\n        const sigPos = sig._alloc()\n        exports.blsSign(sigPos, secPos, m)\n        sig._saveAndFree(sigPos)\n        _free(secPos)\n        return sig\n      }\n    }\n    exports.deserializeHexStrToSecretKey = s => {\n      const r = new exports.SecretKey()\n      r.deserializeHexStr(s)\n      return r\n    }\n\n    exports.PublicKey = class extends Common {\n      constructor () {\n        super(BLS_PUBLICKEY_SIZE)\n      }\n      isZero () {\n        return this._getter(mod._blsPublicKeyIsZero) === 1\n      }\n      isEqual (rhs) {\n        return this._isEqual(mod._blsPublicKeyIsEqual, rhs)\n      }\n      deserialize (s) {\n        this._setter(exports.blsPublicKeyDeserialize, s)\n      }\n      serialize () {\n        return this._getter(exports.blsPublicKeySerialize)\n      }\n      setStr (s, base = 0) {\n        const func = ETH_MODE ? exports.mclBnG1_setStr : exports.mclBnG2_setStr\n        this._setter(func, s, base)\n      }\n      getStr (base = 0) {\n        const func = ETH_MODE ? exports.mclBnG1_getStr : exports.mclBnG2_getStr\n        return this._getter(func, base)\n      }\n      deserializeUncompressed (s) {\n        this._setter(exports.blsPublicKeyDeserializeUncompressed, s)\n      }\n      serializeUncompressed () {\n        return this._getter(exports.blsPublicKeySerializeUncompressed)\n      }\n      add (rhs) {\n        this._update(mod._blsPublicKeyAdd, rhs)\n      }\n      mul (rhs) {\n        this._update(mod._blsPublicKeyMul, rhs)\n      }\n      share (mpk, id) {\n        callShare(mod._blsPublicKeyShare, this, BLS_PUBLICKEY_SIZE, mpk, id)\n      }\n      recover (secVec, idVec) {\n        callRecover(mod._blsPublicKeyRecover, this, BLS_PUBLICKEY_SIZE, secVec, idVec)\n      }\n      isValidOrder () {\n        return this._getter(mod._blsPublicKeyIsValidOrder)\n      }\n      verify (sig, m) {\n        const pubPos = this._allocAndCopy()\n        const sigPos = sig._allocAndCopy()\n        const r = exports.blsVerify(sigPos, pubPos, m)\n        _free(sigPos)\n        _free(pubPos)\n        return r != 0\n      }\n    }\n    exports.deserializeHexStrToPublicKey = s => {\n      const r = new exports.PublicKey()\n      r.deserializeHexStr(s)\n      return r\n    }\n    exports.setGeneratorOfPublicKey = pub => {\n      const pubPos = pub._allocAndCopy()\n      const r = mod._blsSetGeneratorOfPublicKey(pubPos)\n      _free(pubPos)\n      if (r !== 0) throw new Error('bad public key')\n    }\n    exports.getGeneratorOfPublicKey = () => {\n      const pub = new exports.PublicKey()\n      const pubPos = _malloc(BLS_SIGNATURE_SIZE)\n      mod._blsGetGeneratorOfPublicKey(pubPos)\n      pub._saveAndFree(pubPos)\n      return pub\n    }\n    exports.getGeneratorofPublicKey = () => {\n      console.log('WARNING : getGeneratorofPublicKey is renamed to getGeneratorOfPublicKey')\n      return exports.getGeneratorOfPublicKey()\n    }\n\n    exports.Signature = class extends Common {\n      constructor () {\n        super(BLS_SIGNATURE_SIZE)\n      }\n      isZero () {\n        return this._getter(mod._blsSignatureIsZero) === 1\n      }\n      isEqual (rhs) {\n        return this._isEqual(mod._blsSignatureIsEqual, rhs)\n      }\n      deserialize (s) {\n        this._setter(exports.blsSignatureDeserialize, s)\n      }\n      serialize () {\n        return this._getter(exports.blsSignatureSerialize)\n      }\n      deserializeUncompressed (s) {\n        this._setter(exports.blsSignatureDeserializeUncompressed, s)\n      }\n      setStr (s, base = 0) {\n        const func = ETH_MODE ? exports.mclBnG2_setStr : exports.mclBnG1_setStr\n        this._setter(func, s, base)\n      }\n      getStr (base = 0) {\n        const func = ETH_MODE ? exports.mclBnG2_getStr : exports.mclBnG1_getStr\n        return this._getter(func, base)\n      }\n      serializeUncompressed () {\n        return this._getter(exports.blsSignatureSerializeUncompressed)\n      }\n      add (rhs) {\n        this._update(mod._blsSignatureAdd, rhs)\n      }\n      recover (secVec, idVec) {\n        callRecover(mod._blsSignatureRecover, this, BLS_SIGNATURE_SIZE, secVec, idVec)\n      }\n      isValidOrder () {\n        return this._getter(mod._blsSignatureIsValidOrder)\n      }\n      // this = aggSig\n      aggregate (sigVec) {\n        const n = sigVec.length\n        const aggSigPos = this._allocAndCopy()\n        const sigVecPos = _malloc(BLS_SIGNATURE_SIZE * n)\n        for (let i = 0; i < n; i++) {\n          mod.HEAP32.set(sigVec[i].a_, (sigVecPos + BLS_SIGNATURE_SIZE * i) / 4)\n        }\n        const r = mod._blsAggregateSignature(aggSigPos, sigVecPos, n)\n        _free(sigVecPos)\n        this._saveAndFree(aggSigPos)\n        return r == 1\n      }\n      // this = aggSig\n      fastAggregateVerify (pubVec, msg) {\n        const n = pubVec.length\n        const msgSize = msg.length\n        const aggSigPos = this._allocAndCopy()\n        const pubVecPos = _malloc(BLS_PUBLICKEY_SIZE * n)\n        const msgPos = _malloc(msgSize)\n        for (let i = 0; i < n; i++) {\n          mod.HEAP32.set(pubVec[i].a_, (pubVecPos + BLS_PUBLICKEY_SIZE * i) / 4)\n        }\n        mod.HEAP8.set(msg, msgPos)\n        const r = mod._blsFastAggregateVerify(aggSigPos, pubVecPos, n, msgPos, msgSize)\n        _free(msgPos)\n        _free(pubVecPos)\n        _free(aggSigPos)\n        return r == 1\n      }\n      // this = aggSig\n      // msgVec = (32 * pubVec.length)-size Uint8Array\n      aggregateVerifyNoCheck (pubVec, msgVec) {\n        const n = pubVec.length\n        const msgSize = 32\n        if (n == 0 || msgVec.length != msgSize * n) {\n          return false\n        }\n        const aggSigPos = this._allocAndCopy()\n        const pubVecPos = _malloc(BLS_PUBLICKEY_SIZE * n)\n        const msgPos = _malloc(msgVec.length)\n        for (let i = 0; i < n; i++) {\n          mod.HEAP32.set(pubVec[i].a_, (pubVecPos + BLS_PUBLICKEY_SIZE * i) / 4)\n        }\n        mod.HEAP8.set(msgVec, msgPos)\n        const r = mod._blsAggregateVerifyNoCheck(aggSigPos, pubVecPos, msgPos, msgSize, n)\n        _free(msgPos)\n        _free(pubVecPos)\n        _free(aggSigPos)\n        return r == 1\n      }\n    }\n    exports.deserializeHexStrToSignature = s => {\n      const r = new exports.Signature()\n      r.deserializeHexStr(s)\n      return r\n    }\n    // 1 (draft-05) 2 (draft-06) 3 (draft-07)\n    exports.setETHmode = (mode) => {\n      if (mod._blsSetETHmode(mode) != 0) throw new Error(`bad setETHmode ${mode}`)\n    }\n    exports.setETHserialiation = (enable) => {\n      mod._mclBn_setETHserialization(enable ? 1 : 0)\n    }\n    exports.setMapToMode = (mode) => {\n      if (mod._mclBn_setMapToMode(mode) != 0) throw new Error(`bad setMapToMode ${mode}`)\n    }\n    // make setter check the correctness of the order if doVerify\n    exports.verifySignatureOrder = (doVerify) => {\n      mod._blsSignatureVerifyOrder(doVerify)\n    }\n    // make setter check the correctness of the order if doVerify\n    exports.verifyPublicKeyOrder = (doVerify) => {\n      mod._blsPublicKeyVerifyOrder(doVerify)\n    }\n    exports.areAllMsgDifferent = (msgs, msgSize) => {\n      const n = msgs.length / msgSize\n      if (msgs.length != n * msgSize) return false\n      const h = {}\n      for (let i = 0; i < n; i++) {\n        const m = msgs.subarray(i * msgSize, (i + 1) * msgSize)\n        if (m in h) return false\n        h[m] = true\n      }\n      return true\n    }\n    /*\n      return true if all pub[i].verify(sigs[i], msgs[i])\n      msgs is a concatenation of arrays of 32-byte Uint8Array\n    */\n    exports.multiVerify = (pubs, sigs, msgs) => {\n      const MSG_SIZE = 32\n      const RAND_SIZE = 8 // 64-bit rand\n      const threadNum = 0 // not used\n      const n = sigs.length\n      if (pubs.length != n || msgs.length != n) return false\n      for (let i = 0; i < n; i++) {\n        if (msgs[i].length != MSG_SIZE) return false\n      }\n      const sigPos = _malloc(BLS_SIGNATURE_SIZE * n)\n      const pubPos = _malloc(BLS_PUBLICKEY_SIZE * n)\n      const msgPos = _malloc(MSG_SIZE * n)\n      const randPos = _malloc(RAND_SIZE * n)\n\n      // getRandomValues accepts only Uint8Array\n      const rai = mod.HEAP8.subarray(randPos, randPos + RAND_SIZE * n)\n      const rau = new Uint8Array(rai.buffer, randPos, rai.length)\n      exports.getRandomValues(rau)\n      for (let i = 0; i < n; i++) {\n        mod.HEAP32.set(sigs[i].a_, (sigPos + BLS_SIGNATURE_SIZE * i) / 4)\n        mod.HEAP32.set(pubs[i].a_, (pubPos + BLS_PUBLICKEY_SIZE * i) / 4)\n        mod.HEAP8.set(msgs[i], msgPos + MSG_SIZE * i)\n      }\n      const r = mod._blsMultiVerify(sigPos, pubPos, msgPos, MSG_SIZE, randPos, RAND_SIZE, n, threadNum)\n\n      _free(randPos)\n      _free(msgPos)\n      _free(pubPos)\n      _free(sigPos)\n      return r == 1\n    }\n    exports.blsInit(curveType)\n    if (exports.ethMode) {\n      exports.setETHmode(exports.ETH_MODE_DRAFT_07)\n    }\n    exports.neg = x => {\n      if (x instanceof exports.Fr) {\n        return x._op1(mod._mclBnFr_neg)\n      }\n      throw new Error('neg:bad type')\n    }\n    exports.sqr = x => {\n      if (x instanceof exports.Fr) {\n        return x._op1(mod._mclBnFr_sqr)\n      }\n      throw new Error('sqr:bad type')\n    }\n    exports.inv = x => {\n      if (x instanceof exports.Fr) {\n        return x._op1(mod._mclBnFr_inv)\n      }\n      throw new Error('inv:bad type')\n    }\n    exports.add = (x, y) => {\n      if (x.constructor !== y.constructor) throw new Error('add:mismatch type')\n      if (x instanceof exports.Fr) {\n        return x._op2(mod._mclBnFr_add, y)\n      }\n      throw new Error('add:bad type')\n    }\n    exports.sub = (x, y) => {\n      if (x.constructor !== y.constructor) throw new Error('sub:mismatch type')\n      if (x instanceof exports.Fr) {\n        return x._op2(mod._mclBnFr_sub, y)\n      }\n      throw new Error('sub:bad type')\n    }\n    /*\n      Fr * Fr\n    */\n    exports.mul = (x, y) => {\n      if (x instanceof exports.Fr && y instanceof exports.Fr) {\n        return x._op2(mod._mclBnFr_mul, y)\n      }\n      throw new Error('mul:mismatch type')\n    }\n    exports.div = (x, y) => {\n      if (x.constructor !== y.constructor) throw new Error('div:mismatch type')\n      if (x instanceof exports.Fr) {\n        return x._op2(mod._mclBnFr_div, y)\n      }\n      throw new Error('div:bad type')\n    }\n    exports.hashToFr = s => {\n      const x = new exports.Fr()\n      x.setHashOf(s)\n      return x\n    }\n  } // blsSetup()\n\n  const _cryptoGetRandomValues = function(p, n) {\n    const a = new Uint8Array(n)\n    exports.getRandomValues(a)\n    for (let i = 0; i < n; i++) {\n      exports.mod.HEAP8[p + i] = a[i]\n    }\n  }\n  // f(a:array) fills a with random value\n  exports.setRandFunc = f => {\n    exports.getRandomValues = f\n  }\n  exports.init = async (curveType = exports.ethMode ? exports.BLS12_381 : exports.BN254) => {\n    exports.curveType = curveType\n    exports.getRandomValues = crypto.getRandomValues.bind(crypto)\n    exports.mod = await createModule({\n      cryptoGetRandomValues: _cryptoGetRandomValues,\n    })\n    blsSetup(exports, curveType)\n  }\n  return exports\n}\n\nmodule.exports = _blsSetupFactory\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}